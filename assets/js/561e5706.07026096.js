"use strict";(self.webpackChunkmaterial=self.webpackChunkmaterial||[]).push([[6770],{1106:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>x,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var s=r(4848),i=r(8453),t=(r(1470),r(9365),r(168));const o={sidebar_position:3,sidebar_label:"Section 3"},d="Perception Layer - Section 3",l={id:"Theory/PerceptionLayer/section3",title:"Perception Layer - Section 3",description:"* Learn how to use the ESP32 development boardAprender",source:"@site/docs/Theory/PerceptionLayer/section3.md",sourceDirName:"Theory/PerceptionLayer",slug:"/Theory/PerceptionLayer/section3",permalink:"/Material/docs/Theory/PerceptionLayer/section3",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Section 3"},sidebar:"theorySidebar",previous:{title:"Section 2",permalink:"/Material/docs/Theory/PerceptionLayer/section2"},next:{title:"Section 4",permalink:"/Material/docs/Theory/PerceptionLayer/section4"}},a={},c=[{value:"Main References",id:"main-references",level:2},{value:"Framework Arduino",id:"framework-arduino",level:2},{value:"Arduino API basics functions",id:"arduino-api-basics-functions",level:3},{value:"Digital Input and Output",id:"digital-input-and-output",level:3},{value:"Analog input and output functions",id:"analog-input-and-output-functions",level:3},{value:"Time Bases",id:"time-bases",level:3},{value:"Serial port interaction functions",id:"serial-port-interaction-functions",level:3},{value:"Steps to program a device using the Arduino Framework",id:"steps-to-program-a-device-using-the-arduino-framework",level:3},{value:"References",id:"references",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"perception-layer---section-3",children:"Perception Layer - Section 3"}),"\n",(0,s.jsxs)("div",{style:{textAlign:"justify"},children:[(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{children:(0,s.jsx)(n.strong,{children:"Goals"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Learn how to use the ESP32 development boardAprender"}),"\n",(0,s.jsx)(n.li,{children:"Understand the basic input and output API of the Arduino language"}),"\n"]})]}),(0,s.jsx)(n.h2,{id:"main-references",children:"Main References"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This class is based on ",(0,s.jsx)(n.strong,{children:"A deeper dive into IoT"})," lesson 2 from ",(0,s.jsx)(n.strong,{children:"IoT for Beginners"})," (",(0,s.jsx)(n.a,{href:"https://github.com/microsoft/IoT-For-Beginners/blob/main/1-getting-started/lessons/2-deeper-dive/README.md",children:"link"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Other information was taken from the page ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/",children:"https://randomnerdtutorials.com/"})]}),"\n",(0,s.jsxs)(n.li,{children:["ESP32 Arduino Core\u2019s documentation (",(0,s.jsx)(n.a,{href:"https://espressif-docs.readthedocs-hosted.com/projects/arduino-esp32/en/latest/",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Other important references:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/",children:"https://randomnerdtutorials.com/"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.adafruit.com/",children:"https://www.adafruit.com/"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.sparkfun.com/",children:"https://www.sparkfun.com/"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.seeedstudio.com/",children:"https://www.seeedstudio.com/"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://projecthub.arduino.cc/",children:"https://projecthub.arduino.cc/"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.hackster.io/ubidots/projects",children:"https://www.hackster.io/ubidots/projects"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"framework-arduino",children:"Framework Arduino"}),(0,s.jsxs)(n.p,{children:["When we talk about Arduino, we are not just referring to a specific microcontroller; in reality, we are talking about the most popular ",(0,s.jsx)(n.strong,{children:"framework for microcontrollers"})," today."]}),(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arduino"})," is an open-source electronics platform that combines software and hardware. As this platform is open hardware, it is possible to use the Arduino programming model to write code for any other Arduino-compatible platform (generic boards or those from other manufacturers)."]}),(0,s.jsxs)(n.p,{children:["The Arduino programming model is based on the ",(0,s.jsx)(n.strong,{children:"Arduino API"}),", which exposes a set of functions and structures (constants, variables, data types, objects, etc.) that enable interaction between the microcontroller and external hardware (sensors and actuators). The API information can found in ",(0,s.jsx)(n.strong,{children:"Language Reference"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/",children:"link"}),")."]}),(0,s.jsx)(t.A,{src:r(5428).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.h3,{id:"arduino-api-basics-functions",children:"Arduino API basics functions"}),(0,s.jsxs)(n.p,{children:["Arduino API basics functions can be found online in ",(0,s.jsx)(n.strong,{children:"Language Reference"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/",children:"link"}),")"]}),(0,s.jsx)(n.h3,{id:"digital-input-and-output",children:"Digital Input and Output"}),(0,s.jsx)(n.p,{children:"Input and Output functions, basically, allow two things:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Configure the ports (",(0,s.jsx)(n.strong,{children:"pins"}),") as digital inputs or outputs."]}),"\n",(0,s.jsx)(n.li,{children:"Read from or write to these ports according to how they were configured."}),"\n"]}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Information"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"digitalWrite()"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Description"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/digital-io/digitalwrite/",children:"link"}),"): ",(0,s.jsx)("br",{}),"Write a HIGH or LOW value to a specific port. ",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Sintaxis"}),":  ",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"digitalWrite(pin, value)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[" ",(0,s.jsx)(n.strong,{children:"pin"}),": Arduino port number. "]})," ",(0,s.jsxs)("li",{children:[" ",(0,s.jsx)(n.strong,{children:"value"}),": Value written to the port (",(0,s.jsx)(n.code,{children:"HIGH"})," o ",(0,s.jsx)(n.code,{children:"LOW"}),")."]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"digitalRead()"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Description"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/digital-io/digitalread/",children:"link"}),"):",(0,s.jsx)("br",{}),"Read the value from a specific port.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Sintaxis"}),": ",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"digitalRead(pin)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"pin"}),": Arduino pin to be read. "]})," ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"Returned values"}),": Port value to be read (",(0,s.jsx)(n.code,{children:"HIGH"})," o ",(0,s.jsx)(n.code,{children:"LOW"}),")."]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"pinMode()"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Description"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/digital-io/pinmode/",children:"link"}),"):",(0,s.jsx)("br",{}),"Allows you to configure a port as input or output. ",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Sintaxis"}),": ",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"pinMode(pin, mode)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"pin"}),": Arduino pin to be configured "]})," ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"mode"}),": Modo: ",(0,s.jsx)(n.code,{children:"INPUT"}),", ",(0,s.jsx)(n.code,{children:"OUTPUT"})," o ",(0,s.jsx)(n.code,{children:"INPUT_PULLUP"}),"."]})]})]})]})]}),(0,s.jsx)(n.h3,{id:"analog-input-and-output-functions",children:"Analog input and output functions"}),(0,s.jsx)(n.p,{children:"They allow interaction (reading or writing) with ports that function as analog inputs or outputs. The following table summarizes some of these:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Information"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"analogRead()"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Description"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/analog-io/analogread/",children:"link"}),"):",(0,s.jsx)("br",{}),"Reads the value from a specific analog port, returning an integer value associated with the voltage at that port.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Sintaxis"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"analogRead(pin)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),":",(0,s.jsx)("br",{}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"pin"}),": Analog port number (",(0,s.jsx)(n.code,{children:"A0"})," \u2013 ",(0,s.jsx)(n.code,{children:"A5"})," for most of the boards) of Arduino"]}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Returned values"}),":",(0,s.jsx)("br",{}),"Analog value read from the pin. The range will depend on the resolution of the analog-to-digital converter associated with the pin (0 \u2013 1024 when the resolution is 10 bits or 0 \u2013 4096 when the resolution is 12 bits)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"analogWrite()"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Description"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/analog-io/analogwrite/",children:"link"}),"):",(0,s.jsx)("br",{}),"Writes an analog value (by modifying the duty cycle of a PWM wave) to a port.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"analogWrite(pin, value)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"pin"}),": Arduino pin (denoted on the board with the ~ symbol) to which the value is written."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"value"}),": Duty cycle ranging from zero (always off) to 255 (always on)."]})]})]})]})]}),(0,s.jsx)(n.h3,{id:"time-bases",children:"Time Bases"}),(0,s.jsxs)(n.p,{children:["These are functions used to create delays and generate timestamps in programs. There are several functions for this purpose, such as ",(0,s.jsx)(n.code,{children:"delay()"}),", ",(0,s.jsx)(n.code,{children:"delayMicroseconds()"}),", ",(0,s.jsx)(n.code,{children:"micros()"})," y ",(0,s.jsx)(n.code,{children:"millis()"}),". The following table describes the function ",(0,s.jsx)(n.code,{children:"delay()"}),", which was the first one implemented in the above examples:"]}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Information"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"delay()"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Description"})," (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/time/delay/",children:"link"}),"): ",(0,s.jsx)("br",{}),"Stops the program for a specified amount of time (in milliseconds) given as a parameter.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"delay(ms)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),":",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:"ms"}),": Number of milliseconds to stop the program."]})]})]})})]}),(0,s.jsx)(n.h3,{id:"serial-port-interaction-functions",children:"Serial port interaction functions"}),(0,s.jsxs)(n.p,{children:["These are functions used for configuring and interacting with the serial port (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/communication/serial/",children:"link"}),"). The following table shows some commonly used functions:"]}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.begin()"})}),(0,s.jsxs)(n.td,{children:["Configures the serial transmission speed (bits per second = baud).",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.begin(speed)"})," ",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"speed"})}),": Speed transmission"]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.print()"})}),(0,s.jsxs)(n.td,{children:["Prints data to the serial port in ASCII format.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.print(val)"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.print(val, format)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"val"})}),": Value to print. The value can be of any type."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"format"})}),": ASCII representation format (",(0,s.jsx)(n.code,{children:"DEC"}),", ",(0,s.jsx)(n.code,{children:"HEX"}),", ",(0,s.jsx)(n.code,{children:"OCT"})," o ",(0,s.jsx)(n.code,{children:"BIN"}),")."]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.available()"})}),(0,s.jsxs)(n.td,{children:["Gets the number of bytes (characters) available to read from the serial port. These are data that have already arrived and have been stored in the serial receive buffer (which holds 64 bytes).",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.available()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Returned values"}),": Number of bytes available to read."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.read()"})}),(0,s.jsxs)(n.td,{children:["Reads a piece of data coming through the serial port.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.read()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Returned values"}),": First byte of the available serial data (or ",(0,s.jsx)(n.code,{children:"-1"})," if no data is available). The data type read is ",(0,s.jsx)(n.code,{children:"int"}),"."]})]})]})]}),(0,s.jsx)(n.h3,{id:"steps-to-program-a-device-using-the-arduino-framework",children:"Steps to program a device using the Arduino Framework"}),(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arduino Cheat Sheet"}),": There are some references that provide a summary of the Arduino API. Please see ",(0,s.jsx)(n.strong,{children:"Arduino Cheat Sheet"})," (",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(9402).A+"",children:"link"}),") (",(0,s.jsx)(n.a,{href:"https://github.com/liffiton/Arduino-Cheat-Sheet",children:"link"}),")"]})}),(0,s.jsx)(n.p,{children:"To use the Arduino API, it is necessary to follow these steps:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["If the board is generic, verify that it is Arduino compatible (",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/List_of_Arduino_boards_and_compatible_systems",children:"link wikipedia"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Clearly identify the characteristics, pins, and functionality of the board to be used. For this, it is necessary to review the board's user manual. Below are some examples:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Arduino UNO (",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/hardware/uno-rev3",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["NodeMCU-32s (",(0,s.jsx)(n.a,{href:"https://docs.ai-thinker.com/_media/nodemcu32-s_specification_v1.3.pdf",children:"link"}),")"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Proceed to program the firmware code following the Arduino programming model."}),"\n"]}),(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.strong,{children:"Introductory examples"})}),(0,s.jsxs)("div",{children:[(0,s.jsx)(n.p,{children:"Here are several examples showing how the mentioned steps are applied to three of the microcontroller-based platforms available in the laboratory:"}),(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arduino UNO"})})}),(0,s.jsxs)("div",{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required material"})}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Arduino UNO"}),"\n",(0,s.jsx)(n.li,{children:"USB Cables"}),"\n",(0,s.jsxs)(n.li,{children:["Grove - Starter Kit v3 (",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove_Starter_Kit_v3/",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Base Shield V2 (",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Base_Shield_V2/",children:"link"}),")"]}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pinout"})}),(0,s.jsx)(n.p,{children:"To start working with any development platform, it is essential to know at least the pinout map, which is shown below:"}),(0,s.jsx)(t.A,{src:r(1847).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:"It is important to note that the pins are multifunctional, meaning they can be used for different functions. The determination of the function a pin can perform is done through programming."}),(0,s.jsxs)(n.p,{children:["For more information, please visit ",(0,s.jsx)(n.strong,{children:"Overview of the Arduino UNO Components"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/tutorials/uno-rev3/intro-to-board",children:"[link]"}),"."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Functions"})}),(0,s.jsxs)(n.p,{children:["Arduino Cheat Sheet document ",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(9402).A+"",children:"[link]"})," contains a summary of some of the main functions used to program Arduino platforms. For more information, please see the Language Reference Section."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Libraries"})}),(0,s.jsxs)(n.p,{children:["In addition to the functions inherent to the Arduino API, it is possible to use libraries to add extra functionality (just like with software). One of the greatest strengths of the Arduino platform is its extensive number of libraries. In the ",(0,s.jsx)(n.strong,{children:"Libraries"})," section [",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/libraries/",children:"link"}),"], it can be found all the information related to the different existing libraries, supported hardware, and instructions on how to create a library. There are three fundamental things to know when working with libraries.:"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Libraries installation (",(0,s.jsx)(n.strong,{children:"Installing Libraries"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/software/ide-v1/tutorials/installing-libraries",children:"[link]"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Writing libraries (",(0,s.jsx)(n.strong,{children:"Writing a Library for Arduino"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/learn/contributions/arduino-creating-library-guide",children:"[link]"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Style guide (",(0,s.jsx)(n.strong,{children:"Arduino Style Guide for Creating Libraries"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/learn/contributions/arduino-library-style-guide",children:"[link]"}),")"]}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Basic examples"})}),(0,s.jsx)(n.p,{children:"When a person has a basic understanding of programming, the best way to learn is by reading, running, and understanding code through the development of simple examples. Then, by applying what has been learned, they can adapt the code to their particular case. To do this, it is recommended to have the following materials on hand:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Item"}),(0,s.jsx)(n.th,{children:"Material"}),(0,s.jsx)(n.th,{children:"Link"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Language Reference"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/",children:"https://www.arduino.cc/reference/en/"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Built-in Examples"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/",children:"https://docs.arduino.cc/built-in-examples/"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"Libraries"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/libraries/",children:"https://www.arduino.cc/reference/en/libraries/"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"Tutorials"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/tutorials/",children:"https://docs.arduino.cc/tutorials/"})})]})]})]}),(0,s.jsxs)(n.p,{children:["As a starting point, have at least the links associated with items 1 and 2 from the previous table and the ",(0,s.jsx)(n.strong,{children:"Arduino Cheat Sheet"})," ",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(9402).A+"",children:"[link]"}),". The idea is to start looking a few examples that are implemented in the Arduino IDE, as shown in the following figure: figura:"]}),(0,s.jsx)(t.A,{src:r(6373).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:"Let's see some examples."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1"})}),(0,s.jsx)(n.p,{children:"In this example, an LED is made to blink with a period of 2 seconds. The complete description of the example can be found in Blink. The code is shown below:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void setup() {\r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n}\r\n  \r\n// the loop function runs over and over again forever\r\nvoid loop() {\r\n  digitalWrite(LED_BUILTIN, HIGH);  \r\n  delay(1000);                       \r\n  digitalWrite(LED_BUILTIN, LOW);    \r\n  delay(1000);                       \r\n}\n"})}),(0,s.jsx)(n.p,{children:"The schematic is also shown:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/a7f39f62dfdfc906aa477e6af7d7b8ee11e0023aae9e05cab9c2eb8ca34690a8/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f63386462656666373836653532363831633364306539656539353235653134302f32393131342f736368656d617469632e706e67",alt:"Schematic"})}),(0,s.jsx)(n.p,{children:"And the connection diagram:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/0902622cb0474c0f6f32cf8dfcff68a96b374091e9f95a6d8bfa70ae7120a3ef/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f35326332333864626130396332653430623639653036313266663032656630662f61366433362f636972637569742e706e67",alt:"Circuit"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2"})}),(0,s.jsxs)(n.p,{children:["This example can be found in ",(0,s.jsx)(n.strong,{children:"How to Wire and Program a Button"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/digital/Button",children:"[link]"}),". In this example, a LED lights up when a switch is pressed."]}),(0,s.jsx)(n.p,{children:"The code is shown to follow:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const int buttonPin = 2;     \r\nconst int ledPin =  13;      \r\n\r\nint buttonState = 0;         \r\n\r\nvoid setup() {\r\n  pinMode(ledPin, OUTPUT);\r\n  pinMode(buttonPin, INPUT);\r\n}\r\n\r\nvoid loop() {\r\n  buttonState = digitalRead(buttonPin);\r\n  if (buttonState == HIGH) {\r\n    digitalWrite(ledPin, HIGH);\r\n  } \r\n  else {\r\n    digitalWrite(ledPin, LOW);\r\n  }\r\n}\n"})}),(0,s.jsx)(n.p,{children:"The schematic is shown to follow:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/f190462dad109bfb99632d22c074bbb5a204333767514ae96fa17a7369faaf5b/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f66623834343962343833346466626266336330333232336338626333653562352f61366433362f736368656d617469632e706e67",alt:"sch"})}),(0,s.jsx)(n.p,{children:"Finally, the connection diagram is the following:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/c43feb60295b946c18e3e48e847d4ebf94c5911a4731de42342a8bba6f0078af/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f37333730326565313231383630666130346337663664623562633737313833622f61366433362f636972637569742e706e67",alt:"bb"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3"})}),(0,s.jsxs)(n.p,{children:["This example is taken from ",(0,s.jsx)(n.strong,{children:"Fading"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/analog/Fading",children:"[link]"}),". In this example, the brightness of an LED is automatically adjusted."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int ledPin = 9;    \r\n\r\nvoid setup() {\r\n  // nothing happens in setup\r\n}\r\n\r\nvoid loop() {\r\n  for (int fadeValue = 0 ; fadeValue <= 255; fadeValue += 5) {\r\n    analogWrite(ledPin, fadeValue);\r\n    delay(30);\r\n  }\r\n  \r\n  for (int fadeValue = 255 ; fadeValue >= 0; fadeValue -= 5) {\r\n    analogWrite(ledPin, fadeValue);\r\n    delay(30);\r\n  }\r\n}\n"})}),(0,s.jsx)(n.p,{children:"The schematic is shown to follow:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/20c02f5abdbe9be94b6744cbf507163a2fc3e8d699c3d006b58fd6b839e8ee56/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f64653432623364333938636634303736386331333530383933323432386664622f61366433362f736368656d617469632e706e67",alt:"sch"})}),(0,s.jsx)(n.p,{children:"Finally, the connections are as follows:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/b1cf5dad6cb08bb993cea2b3f4e63ec2bc749d2016441dd08332e84c7643d443/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f30373962316261623337353836303361353663356439386531663539613838652f61366433362f636972637569742e706e67",alt:"bb"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 4"})}),(0,s.jsxs)(n.p,{children:["This example is taken from ",(0,s.jsx)(n.strong,{children:"Analog Read Serial"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/basics/AnalogReadSerial",children:"[link]"}),". Here, a potentiometer is read, and its state is printed through the serial monitor."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void setup() {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop() {\r\n  int sensorValue = analogRead(A0);\r\n  Serial.println(sensorValue);\r\n  delay(1);        \r\n}\n"})}),(0,s.jsx)(n.p,{children:"The schematic is as follows:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/1cbb6d7effc07dd7dc934045e267b0efb266228f55f8a2f7a09afbb7e02f41c5/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f33626238343265633038623861383366383863316137633332383030666534312f61366433362f736368656d617469632e706e67",alt:"sch"})}),(0,s.jsx)(n.p,{children:"Finally, the connection diagram is shown to follow:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/5c2385e4b61333826b649fc4b8d703e79b10ba443f1b6353e49bd0973cc75133/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f31303834326230343939613565346533373061656463643232326235326532632f35613139302f636972637569742e706e67",alt:"bb"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 5"})}),(0,s.jsxs)(n.p,{children:["This example is taken from ",(0,s.jsx)(n.strong,{children:"Analog In, Out Serial"})," ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/analog/AnalogInOutSerial",children:"[link]"}),". Here, a potentiometer is used to control the brightness of an LED; additionally, its state is printed through the serial monitor."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'const int analogInPin = A0;  \r\nconst int analogOutPin = 9; \r\n\r\nint sensorValue = 0;        \r\nint outputValue = 0;        \r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop() {\r\n  sensorValue = analogRead(analogInPin);\r\n  outputValue = map(sensorValue, 0, 1023, 0, 255);\r\n  analogWrite(analogOutPin, outputValue);\r\n  Serial.print("sensor = ");\r\n  Serial.print(sensorValue);\r\n  Serial.print("\\t output = ");\r\n  Serial.println(outputValue);\r\n  delay(2);\r\n}\n'})}),(0,s.jsx)(n.p,{children:"The schematic is as follows:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/2d63517e456c044ff2c3c47a9a84f490f105875a857f3d26bf9ab111caec3925/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f33396135646136653036633531333035666130626239303266336361623165332f61366433362f736368656d617469632e706e67",alt:"sch"})}),(0,s.jsx)(n.p,{children:"On the other hand, the connections between the components are shown below:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/68816c69fd9d58266b610905348e2dce49e39e4a8723da0cf2a558a008650081/68747470733a2f2f646f63732e61726475696e6f2e63632f7374617469632f37646266623462346330393062613162633532633261373739383232623866392f61366433362f636972637569742e706e67",alt:"bb"})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Examples Implementation"})}),(0,s.jsx)(n.p,{children:"To implement each of the examples, the following steps can be carried out. The workflow throughout this session will be (steps 2 and 3 are interchangeable):"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Write the IDE program"}),"\n",(0,s.jsx)(n.li,{children:"Download the code"}),"\n",(0,s.jsx)(n.li,{children:"Assemble the circuit"}),"\n",(0,s.jsx)(n.li,{children:"Test"}),"\n"]})]})]}),(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"ESP8266"})})}),(0,s.jsxs)("div",{children:[(0,s.jsxs)(n.p,{children:["The NodeMCU is an open-source platform with Wi-Fi connectivity based on the ",(0,s.jsx)(n.strong,{children:"SoC ESP8266"})," (",(0,s.jsx)(n.a,{href:"https://github.com/UdeA-IoT/clases-IoT_capa-percepcion_2023-2/blob/main/dia3/esp8266/0a-esp8266ex_datasheet_en.pdf",children:"datasheet"}),"). This makes it an ideal platform for the development of IoT projects."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required material"})}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Board NodeMcu V3 for ESP8266"}),"\n",(0,s.jsx)(n.li,{children:"Type C cable USB"}),"\n",(0,s.jsxs)(n.li,{children:["Grove - Starter Kit v3 (",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove_Starter_Kit_v3/",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Grove Base Shield for NodeMCU V1.0\r\n(",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove_Base_Shield_for_NodeMCU_V1.0/",children:"link"}),")"]}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Previous work with fritzing"})}),(0,s.jsxs)(n.p,{children:["To prototype using elements (from different manufacturers) available in development kits to be used in the laboratory, follow the steps illustrated in the tutorial ",(0,s.jsx)(n.a,{href:"https://steemit.com/utopian-io/@thinkingmind/how-to-add-components-in-fritzing",children:"How to Add Components in Fritzing"})," (for a better understanding, please see the video ",(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=lEEkYk5IQVY",children:"video"})," antes de empezar). To this end, please add the following components:"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"NodeMCU and other components"}),": these components can be obtained from ",(0,s.jsx)(n.a,{href:"https://github.com/AchimPieters/Fritzing-Custom-Parts",children:"repositorio"})," more precisely, download the following ",(0,s.jsx)(n.a,{href:"https://github.com/AchimPieters/Fritzing-Custom-Parts/releases/tag/0.0.2",children:"pagina"})," by selecting the file ",(0,s.jsx)(n.a,{href:"https://github.com/AchimPieters/Fritzing-Custom-Parts/releases/download/0.0.2/Fritzing.parts.zip",children:"Fritzing.parts"})," (Author's page: ",(0,s.jsx)(n.a,{href:"https://www.studiopieters.nl/esp8266-programmer/",children:"https://www.studiopieters.nl/esp8266-programmer/"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Grove"}),": download the file ",(0,s.jsx)(n.a,{href:"https://github.com/Seeed-Studio/fritzing_parts/blob/master/seeed_fritzing_parts.fzbz",children:"seeed_fritzing_parts.fzbz"})," from ",(0,s.jsx)(n.a,{href:"https://github.com/Seeed-Studio/fritzing_parts",children:"repositorio"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Elegoo"}),": the parts are in the following ",(0,s.jsx)(n.a,{href:"https://github.com/marcinwisniowski/ElegooFritzingBin",children:"repositorio"}),". For this, download ",(0,s.jsx)(n.a,{href:"https://github.com/marcinwisniowski/ElegooFritzingBin/releases/download/0.6.3/Elegoo-0.6.3.fzbz",children:"Elegoo-0.6.3.fzbz"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Adafruit"}),": download the following file ",(0,s.jsx)(n.a,{href:"https://github.com/adafruit/Fritzing-Library/archive/master.zip",children:"Fritzing-Library-master.zip"}),", then, unzip and add to the library the file ",(0,s.jsx)(n.strong,{children:"AdaFruit.fzbz"}),"."]}),"\n"]}),(0,s.jsx)(n.p,{children:"Once the above is done, diagrams and assemblies can be done with the different components in the laboratory."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pinout"})}),(0,s.jsx)(n.p,{children:"As mentioned in previous classes, the starting point is always to know the pinout diagram of the development board. This is shown below.:"}),(0,s.jsx)(t.A,{src:r(8460).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:"The pinout map of NodeMCU ESP8266 is:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"17 GPIO\u2019s"}),"\n",(0,s.jsx)(n.li,{children:"SPI"}),"\n",(0,s.jsx)(n.li,{children:"I2C (implemented on software)"}),"\n",(0,s.jsx)(n.li,{children:"I2S interfaces with DMA"}),"\n",(0,s.jsx)(n.li,{children:"UART"}),"\n",(0,s.jsx)(n.li,{children:"10-bit ADC"}),"\n"]}),(0,s.jsxs)(n.p,{children:["Additionally, the pin numbering scheme of the NodeMCU board (for example, the pin marked as ",(0,s.jsx)(n.code,{children:"D0"}),") is different from the numbering scheme of the ESP8266 (internal scheme). For instance, the ",(0,s.jsx)(n.code,{children:"D0"})," pin on the board is mapped to the internal ",(0,s.jsx)(n.code,{children:"GPIO16"}),". The recommendation is to use the external numbering scheme."]}),(0,s.jsx)(n.p,{children:"The following table shows the equivalence between the board numbering and the internal numbering:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"NodeMCU pin"}),(0,s.jsx)(n.th,{children:"ESP8266 pin"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D0"}),(0,s.jsx)(n.td,{children:"GPIO16"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D1"}),(0,s.jsx)(n.td,{children:"GPIO5"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D2"}),(0,s.jsx)(n.td,{children:"GPIO4"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D3"}),(0,s.jsx)(n.td,{children:"GPIO0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D4"}),(0,s.jsx)(n.td,{children:"GPIO2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D5"}),(0,s.jsx)(n.td,{children:"GPIO14"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D6"}),(0,s.jsx)(n.td,{children:"GPIO12"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D7"}),(0,s.jsx)(n.td,{children:"GPIO13"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D8"}),(0,s.jsx)(n.td,{children:"GPIO15"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D9"}),(0,s.jsx)(n.td,{children:"GPIO3"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D10"}),(0,s.jsx)(n.td,{children:"GPIO1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D11"}),(0,s.jsx)(n.td,{children:"GPIO9"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"D12"}),(0,s.jsx)(n.td,{children:"GPIO10"})]})]})]}),(0,s.jsxs)(n.p,{children:["According to the previous table, it is possible to code sketches using either of the two nomenclatures. To understand this, observe the following code snippet where the ",(0,s.jsx)(n.code,{children:"D2"})," pin (",(0,s.jsx)(n.code,{children:"GPIO4"}),") is used as an output."]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"NodeMCU Nomenclature"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"pinMode(D2, OUTPUT);\r\ndigitalWrite(D2, HIGH);\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"ESP8266 Nomenclature"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"pinMode(4, OUTPUT);\r\ndigitalWrite(4, HIGH);\n"})}),"\n"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["It is important to take into account that the ",(0,s.jsx)(n.code,{children:"D0"})," pin (",(0,s.jsx)(n.code,{children:"GPIO16"}),") can be used only for ",(0,s.jsx)(n.code,{children:"GPIO read/write"}),". It does not support ",(0,s.jsx)(n.code,{children:"open-drain/interrupt/PWM/I\xb2C"})," or ",(0,s.jsx)(n.code,{children:"1-Wire"}),". To understand better more about the pinout map, please visit the page ",(0,s.jsx)(n.strong,{children:"ESP8266 Pinout Reference: Which GPIO pins should you use?"})," (",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/esp8266-pinout-reference-gpios/",children:"link"}),")"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arduino core for ESP8266 WiFi chip"})}),(0,s.jsxs)(n.p,{children:["Thanks to this pluging (",(0,s.jsx)(n.a,{href:"https://github.com/esp8266/Arduino",children:"Arduino core for ESP8266 WiFi chip"}),"), it is possible to program the ESP8266, by using functions and libraries of the Arduino API."]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"ESP8266 Arduino core"})," documentation can be seen in [",(0,s.jsx)(n.a,{href:"https://arduino-esp8266.readthedocs.io/en/3.0.2/",children:"Documentaci\xf3n en ingles"}),"|",(0,s.jsx)(n.a,{href:"https://esp8266-arduino-spanish.readthedocs.io/es/latest/",children:"Spanish documentation"}),"]."]}),(0,s.jsxs)(n.p,{children:["The following ",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:r(5144).A+"",children:"link"})," summarizes some of the pluging functions for ESP8266 Arduino."]}),(0,s.jsxs)(n.p,{children:["To use the ",(0,s.jsx)(n.strong,{children:"ESP8266 Arduino core"}),", follows the instructions shown in ",(0,s.jsx)(n.a,{href:"https://learn.sparkfun.com/tutorials/esp8266-thing-hookup-guide/all#installing-the-esp8266-arduino-addon",children:"tutorial"}),"."]}),(0,s.jsx)(n.p,{children:"Next, the examples created in Arduino will be shown adapted to the ESP8266 platform."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1"})}),(0,s.jsxs)(n.p,{children:["Make an LED blink with a period of 2 seconds using the LED on the NodeMCU board. (Code taken from ",(0,s.jsx)(n.strong,{children:"C\xf3mo programar NodeMCU con el IDE de Arduino"})," ",(0,s.jsx)(n.a,{href:"https://programarfacil.com/esp8266/como-programar-nodemcu-ide-arduino/",children:"[link]"}),")"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#define LED_BUILTIN 2\r\n\r\nvoid setup() {\r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n}\r\n\r\n// the loop function runs over and over again forever\r\nvoid loop() {\r\n  digitalWrite(LED_BUILTIN, HIGH);  \r\n  delay(1000);                       \r\n  digitalWrite(LED_BUILTIN, LOW);    \r\n  delay(1000);                       \r\n}\n"})}),(0,s.jsx)(n.p,{children:"The board (Take from that website) is shown to follow:"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/3639d45a4cd14a5916f9f32d56a7dbd518d71c4ddd763a61a696552f03599d59/68747470733a2f2f70726f6772616d6172666163696c2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f30332f416e696d6163696f6e5f626c696e6b5f6e6f64656d63755f736d616c6c2e676966",alt:"imagen"})}),(0,s.jsxs)(n.p,{children:["On the other hand, if the task had been to make an LED blink, but this time using the D5 port (GPIO14), the code would have a minimal change as shown below. (Code taken from ",(0,s.jsx)(n.strong,{children:"Example Sketch: Blink"})," ",(0,s.jsx)(n.a,{href:"https://learn.sparkfun.com/tutorials/esp8266-thing-hookup-guide/all#example-sketch-blink",children:"[link]"}),"):"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#define ESP8266_LED D5 // D5 = 14\r\n\r\nvoid setup() {\r\n  pinMode(ESP8266_LED, OUTPUT);\r\n}\r\n\r\nvoid loop() {\r\n  digitalWrite(ESP8266_LED, HIGH);\r\n  delay(500);\r\n  digitalWrite(ESP8266_LED, LOW);\r\n  delay(500);\r\n}\n"})}),(0,s.jsx)(n.p,{children:"The connection associated to the above code is shown to follow:"}),(0,s.jsx)(t.A,{src:r(1162).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2"})}),(0,s.jsxs)(n.p,{children:["Turn on the built-in LED of the NodeMCU board when a switch is pressed. (Code taken from ",(0,s.jsx)(n.strong,{children:"C\xf3mo programar NodeMCU con el IDE de Arduino"})," ",(0,s.jsx)(n.a,{href:"https://programarfacil.com/esp8266/como-programar-nodemcu-ide-arduino/",children:"[link]"}),")"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"#define LED_BUILTIN 2\r\n#define BUTTON_BUILTIN 0 \r\n\r\nvoid setup() { \r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n  pinMode(BUTTON_BUILTIN, INPUT);\r\n} \r\n\r\nvoid loop() {\r\n  int estado = digitalRead(BUTTON_BUILTIN); \r\n  digitalWrite(LED_BUILTIN, estado); \r\n}\n"})}),(0,s.jsx)(n.p,{children:"The following image (taken from the original page) shows the operation of the previous code once it has been uploaded to the board."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://camo.githubusercontent.com/e8635173e656d8025a6d7eace892a646333537b3d4485e3a3b512a99b0cad522/68747470733a2f2f70726f6772616d6172666163696c2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031372f30332f416e696d6163696f6e5f626f746f6e5f6e6f64656d63755f736d616c6c2e676966",alt:"img"})}),(0,s.jsx)(n.p,{children:"The following example shows the same code as before, but in this case, the following ports are used:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Element"}),(0,s.jsx)(n.th,{children:"Port"}),(0,s.jsx)(n.th,{children:"Component"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Switch"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"D6"})," (",(0,s.jsx)(n.code,{children:"GPIO12"}),")"]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove-Red_LED/",children:"Grove - Red LED"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Led"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"D1"})," (",(0,s.jsx)(n.code,{children:"GPIO5"}),")"]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove-Button/",children:"Grove - Button"})})]})]})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"/* Pin Definitions */\r\nconst int LED_PIN = 5; // D1 = GPIO5\r\nconst int BUTTON_PIN = 12; // D6 = GPIO12\r\n \r\nvoid setup() { \r\n  pinMode(LED_PIN, OUTPUT);\r\n  pinMode(BUTTON_PIN, INPUT);\r\n} \r\n \r\nvoid loop() {\r\n  int estado = digitalRead(BUTTON_PIN); \r\n  digitalWrite(LED_PIN, estado); \r\n}\n"})}),(0,s.jsxs)(n.p,{children:["The following image shows the connection of the previous example using the components (",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove-Red_LED/",children:"Grove - Red LED"})," and ",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove-Button/",children:"Grove - Button"}),") from groove kit:"]}),(0,s.jsx)(t.A,{src:r(5686).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3"})}),(0,s.jsxs)(n.p,{children:["The LED brightness is modified automatically (connected to ",(0,s.jsx)(n.code,{children:"D2"})," pin (",(0,s.jsx)(n.code,{children:"GPIO4"}),"))."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"/* Pin Definitions */\r\nconst int ledPin = D2; // D1 = GPIO4\r\n  \r\n\r\nvoid setup() {\r\n  // nothing happens in setup\r\n}\r\n\r\nvoid loop() {\r\n\r\n  for (int fadeValue = 0 ; fadeValue <= 255; fadeValue += 5) {\r\n    analogWrite(ledPin, fadeValue);\r\n    delay(30);\r\n\r\n  }\r\n\r\n  for (int fadeValue = 255 ; fadeValue >= 0; fadeValue -= 5) {\r\n    analogWrite(ledPin, fadeValue);\r\n    delay(30);\r\n  }\r\n}\n"})}),(0,s.jsxs)(n.p,{children:["The following image shows the connection diagram using the ",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove-Red_LED/",children:"Grove - Red LED"})," for the previous code:"]}),(0,s.jsx)(t.A,{src:r(6071).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 4"})}),(0,s.jsx)(n.p,{children:"In this example, an analog voltage value associated with a potentiometer is printed on the serial monitor:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"/* Pin Definitions */\r\nconst int ANALOG_PIN = A0; // A0\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop() {\r\n  int sensorValue = analogRead(ANALOG_PIN);\r\n  Serial.println(sensorValue);\r\n  delay(1);        \r\n}\n"})}),(0,s.jsxs)(n.p,{children:["For this case, the ",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove-Rotary_Angle_Sensor/",children:"Grove - Rotary Angle Sensor"})," was connected to ",(0,s.jsx)(n.code,{children:"A0"})," pin."]}),(0,s.jsx)(t.A,{src:r(462).A,alt:"",className:"custom-img"})]})]}),(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"ESP32"})})}),(0,s.jsxs)("div",{children:[(0,s.jsxs)(n.p,{children:["The ESP32 (",(0,s.jsx)(n.a,{href:"https://cdn.sparkfun.com/datasheets/IoT/esp32_datasheet_en.pdf",children:"ESP32 Series Datasheet"}),") is the successor to the ESP8266. In addition to suporting Wi-Fi connectivity, it also supports Bluetooth (4.2 and Low Energy) connectivity."]}),(0,s.jsxs)(n.p,{children:["There are different development platforms (",(0,s.jsx)(n.a,{href:"https://makeradvisor.com/esp32-development-boards-review-comparison/",children:"ESP32 Development Boards Review and Comparison"}),"). For this case the NodeMCU-32S de Ai-Thinker (",(0,s.jsx)(n.a,{href:"https://docs.ai-thinker.com/_media/esp32/docs/nodemcu-32s_product_specification.pdf",children:"Nodemcu-32s Datasheet"}),") will be used."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Required material"})}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"NodeMCU-32S board"}),"\n",(0,s.jsx)(n.li,{children:"Type C cable USB"}),"\n",(0,s.jsxs)(n.li,{children:["Grove - Starter Kit v3 (",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove_Starter_Kit_v3/",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Grove Base Shield for NodeMCU V1.0 (",(0,s.jsx)(n.a,{href:"https://wiki.seeedstudio.com/Grove_Base_Shield_for_NodeMCU_V1.0/",children:"link"}),")"]}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Previous work with fritzing"})}),(0,s.jsxs)(n.p,{children:["To prototype using elements (from different manufacturers) available in development kits to be used in the laboratory, follow the steps illustrated in the tutorial ",(0,s.jsx)(n.a,{href:"https://steemit.com/utopian-io/@thinkingmind/how-to-add-components-in-fritzing",children:"How to Add Components in Fritzing"})," (to understand better this procedure, plese watch ",(0,s.jsx)(n.a,{href:"https://www.youtube.com/watch?v=lEEkYk5IQVY",children:"video"})," before starting). For that, please add the following components:"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ESP32"}),": (",(0,s.jsx)(n.a,{href:"https://forum.fritzing.org/uploads/default/original/2X/1/1c6c1b0e5bff03730a40b696b354783432fbb506.fzpz",children:"ESP32S_HiLetgo.fzpz"}),") this can be download from ",(0,s.jsx)(n.a,{href:"https://forum.fritzing.org/t/esp32s-hiletgo-dev-boad-with-pinout-template/5357?u=steelgoose",children:"ESP32S-HiLetgo Dev Boad with Pinout Template"}),". The pinout (in fritzing) is shown to follow:"]}),"\n"]}),(0,s.jsx)(t.A,{src:r(4713).A,alt:"",className:"custom-img"}),(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Elegoo sensors kit"}),": see the above link"]}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Pinout"})}),(0,s.jsx)(n.p,{children:"The pinout diagram is shown to follow:"}),(0,s.jsx)(t.A,{src:r(5557).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:"The NodeMCU-32s has 38 pins in total, which are summarized in the following figure:"}),(0,s.jsx)(t.A,{src:r(4366).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:"The following table, taken from the datasheet, describes each one of the pins:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"No."}),(0,s.jsx)(n.th,{children:"Pin Name"}),(0,s.jsx)(n.th,{children:"Functional Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"3.3V"}),(0,s.jsx)(n.td,{children:"Module power supply pin"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"EN"}),(0,s.jsx)(n.td,{children:"Chip Enabled Pin, Active High"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"SVP"}),(0,s.jsx)(n.td,{children:"GPIO36\uff0cADC1_CH0\uff0cRTC_GPIO0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"SVN"}),(0,s.jsx)(n.td,{children:"GPIO39\uff0cADC1_CH3\uff0cRTC_GPIO3"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"5"}),(0,s.jsx)(n.td,{children:"P34"}),(0,s.jsx)(n.td,{children:"GPIO34\uff0cADC1_CH6\uff0cRTC_GPIO4"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"6"}),(0,s.jsx)(n.td,{children:"P35"}),(0,s.jsx)(n.td,{children:"GPIO35\uff0cADC1_CH7\uff0cRTC_GPIO5"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"7"}),(0,s.jsx)(n.td,{children:"P32"}),(0,s.jsx)(n.td,{children:"GPIO32, XTAL_32K_P (32.768kHz Crystal input), ADC1_CH4, TOUCH9,RTC_GPIO9"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"8"}),(0,s.jsx)(n.td,{children:"P33"}),(0,s.jsx)(n.td,{children:"GPIO33, XTAL_32K_N (32.768kHz Crystal output),ADC1_CH5, TOUCH8,RTC_GPIO8"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"9"}),(0,s.jsx)(n.td,{children:"P25"}),(0,s.jsx)(n.td,{children:"GPIO25\uff0cDAC_1\uff0cADC2_CH8\uff0cRTC_GPIO6\uff0cEMAC_RXD0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"10"}),(0,s.jsx)(n.td,{children:"P26"}),(0,s.jsx)(n.td,{children:"GPIO26\uff0cDAC_2\uff0cADC2_CH9\uff0cRTC_GPIO7\uff0cEMAC_RX_DV"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"11"}),(0,s.jsx)(n.td,{children:"P27"}),(0,s.jsx)(n.td,{children:"GPIO27\uff0cADC2_CH7\uff0cTOUCH7\uff0cRTC_GPIO17\uff0cEMAC_RX_DV"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"12"}),(0,s.jsx)(n.td,{children:"P14"}),(0,s.jsx)(n.td,{children:"GPIO14, ADC2_CH6, TOUCH6, RTC_GPIO16, MTMS, HSPICLK, HS2_CLK,SD_CLK, EMAC_TXD2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"13"}),(0,s.jsx)(n.td,{children:"P12"}),(0,s.jsx)(n.td,{children:"GPIO12, ADC2_CH5, TOUCH5, RTC_GPIO15, MTDI, HSPIQ, HS2_DATA2,SD_DATA2, EMAC_TXD3"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"14"}),(0,s.jsx)(n.td,{children:"GND"}),(0,s.jsx)(n.td,{children:"GND"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"15"}),(0,s.jsx)(n.td,{children:"P13"}),(0,s.jsx)(n.td,{children:"GPIO13, ADC2_CH4, TOUCH4, RTC_GPIO14, MTCK, HSPID, HS2_DATA3,SD_DATA3, EMAC_RX_ER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"16"}),(0,s.jsx)(n.td,{children:"SD2"}),(0,s.jsx)(n.td,{children:"GPIO9, SD_DATA2, SPIHD, HS1_DATA2, U1RXD"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"17"}),(0,s.jsx)(n.td,{children:"SD3"}),(0,s.jsx)(n.td,{children:"GPIO10, SD_DATA3, SPIWP, HS1_DATA3, U1TXD"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"18"}),(0,s.jsx)(n.td,{children:"CMD"}),(0,s.jsx)(n.td,{children:"GPIO11, SD_CMD, SPICS0, HS1_CMD, U1RTS"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"19"}),(0,s.jsx)(n.td,{children:"5V"}),(0,s.jsx)(n.td,{children:"Module power supply pin"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"20"}),(0,s.jsx)(n.td,{children:"CLK"}),(0,s.jsx)(n.td,{children:"GPIO6, SD_CLK, SPICLK, HS1_CLK, U1CTS"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"21"}),(0,s.jsx)(n.td,{children:"SD0"}),(0,s.jsx)(n.td,{children:"GPIO7, SD_DATA0, SPIQ, HS1_DATA0, U2RTS"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"22"}),(0,s.jsx)(n.td,{children:"SD1"}),(0,s.jsx)(n.td,{children:"GPIO8, SD_DATA1, SPID, HS1_DATA1, U2CTS"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"23"}),(0,s.jsx)(n.td,{children:"P15"}),(0,s.jsx)(n.td,{children:"GPIO15, ADC2_CH3, TOUCH3, MTDO, HSPICS0, RTC_GPIO13, HS2_CMD,SD_CMD, EMAC_RXD3"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"24"}),(0,s.jsx)(n.td,{children:"P2"}),(0,s.jsx)(n.td,{children:"GPIO2, ADC2_CH2, TOUCH2, RTC_GPIO12, HSPIWP, HS2_DATA0,SD_DATA0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"25"}),(0,s.jsx)(n.td,{children:"P0"}),(0,s.jsxs)(n.td,{children:["GPIO0, ADC2_CH1, TOUCH1, CLK_OUT1,RTC_GPIO11, EMAC_TX_CLK; ",(0,s.jsx)(n.strong,{children:"Download mode: external pull low, running mode: floating or external pull high"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"26"}),(0,s.jsx)(n.td,{children:"P4"}),(0,s.jsx)(n.td,{children:"GPIO4, ADC2_CH0, TOUCH0, RTC_GPIO10, HSPIHD, HS2_DATA1,SD_DATA1, EMAC_TX_ER"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"27"}),(0,s.jsx)(n.td,{children:"P16"}),(0,s.jsx)(n.td,{children:"GPIO16, HS1_DATA4, U2RXD, EMAC_CLK_OUT"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"28"}),(0,s.jsx)(n.td,{children:"P17"}),(0,s.jsx)(n.td,{children:"GPIO17, HS1_DATA5, U2TXD, EMAC_CLK_OUT_180"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"29"}),(0,s.jsx)(n.td,{children:"P5"}),(0,s.jsx)(n.td,{children:"GPIO5, VSPICS0, HS1_DATA6, EMAC_RX_CLK"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"30"}),(0,s.jsx)(n.td,{children:"P18"}),(0,s.jsx)(n.td,{children:"GPIO18, VSPICLK, HS1_DATA7"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"31"}),(0,s.jsx)(n.td,{children:"P19"}),(0,s.jsx)(n.td,{children:"GPIO19, VSPIQ, U0CTS, EMAC_TXD0"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"32"}),(0,s.jsx)(n.td,{children:"GND"}),(0,s.jsx)(n.td,{children:"GND"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"33"}),(0,s.jsx)(n.td,{children:"P21"}),(0,s.jsx)(n.td,{children:"GPIO21, VSPIHD, EMAC_TX_EN"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"34"}),(0,s.jsx)(n.td,{children:"RX"}),(0,s.jsx)(n.td,{children:"GPIO3, U0RXD, CLK_OUT2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"35"}),(0,s.jsx)(n.td,{children:"TX"}),(0,s.jsx)(n.td,{children:"GPIO1, U0TXD, CLK_OUT3, EMAC_RXD2"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"36"}),(0,s.jsx)(n.td,{children:"P22"}),(0,s.jsx)(n.td,{children:"GPIO22, VSPIWP, U0RTS, EMAC_TXD1"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"37"}),(0,s.jsx)(n.td,{children:"P23"}),(0,s.jsx)(n.td,{children:"GPIO23, VSPID, HS1_STROBE"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"38"}),(0,s.jsx)(n.td,{children:"GND"}),(0,s.jsx)(n.td,{children:"GND"})]})]})]}),(0,s.jsxs)(n.p,{children:["For a better understanding, please visit ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/esp32-pinout-reference-gpios/",children:"ESP32 Pinout Reference: Which GPIO pins should you use?"})]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arduino core for the ESP32, ESP32-S2, ESP32-S3 and ESP32-C3"})}),(0,s.jsxs)(n.p,{children:["Similar to the ESP8266, the ESP32 can be programmed using the Arduino API. For more information, please consult the documentation of this Core at the following ",(0,s.jsx)(n.a,{href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/",children:"link"}),"."]}),(0,s.jsxs)(n.p,{children:["Before starting to use the core for the ESP32, it is necessary to install the required libraries. To do this, follow the instructions described in the link ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/installing-the-esp32-board-in-arduino-ide-windows-instructions/",children:"Installing the ESP32 Board in Arduino IDE (Windows, Mac OS X, Linux)"})]}),(0,s.jsxs)(n.p,{children:["Before analyzing the examples shown below, it is recommended to take a look at the link ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/getting-started-with-esp32/",children:"Getting Started with the ESP32 Development Board"})]}),(0,s.jsx)(n.p,{children:"Before starting to work on the examples, you need to select the board you will be working with (NodeMCU-32s) as shown in the following figure:"}),(0,s.jsx)(t.A,{src:r(3913).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:"The following examples created in Arduino will be shown adapted to the ESP32 platform."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 1"})}),(0,s.jsxs)(n.p,{children:["Make an LED blink with a period of 2 seconds using the LED on the ESP32 board. (Example taken from ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/basics/Blink",children:"Blink"}),")."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void setup() {\r\n  pinMode(LED_BUILTIN, OUTPUT);\r\n}\r\n\r\n// the loop function runs over and over again forever\r\nvoid loop() {\r\n  digitalWrite(LED_BUILTIN, HIGH);   \r\n  delay(1000);                       \r\n  digitalWrite(LED_BUILTIN, LOW);    \r\n  delay(1000);                      \r\n}\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example 1 online simulation"}),": ",(0,s.jsx)(n.a,{href:"https://wokwi.com/projects/335030762714694227",children:"link"})]}),"\n"]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 2"})}),(0,s.jsxs)(n.p,{children:["Turn on the built-in LED of the ESP32 board when a switch is pressed. (Code adapted to ESP32 from ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/digital/Button",children:"How to Wire and Program a Button"}),")"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const int buttonPin = 5;         //  (GPIO5)\r\nconst int ledPin =  LED_BUILTIN; \r\n\r\n// variables will change:\r\nint buttonState = 0;         \r\n\r\nvoid setup() {\r\n  pinMode(ledPin, OUTPUT);\r\n  pinMode(buttonPin, INPUT);\r\n}\r\n\r\nvoid loop() {\r\n  buttonState = digitalRead(buttonPin);\r\n\r\n  if (buttonState == HIGH) {\r\n    digitalWrite(ledPin, HIGH);\r\n  } else {\r\n    digitalWrite(ledPin, LOW);\r\n  }\r\n}\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example 2 online simulation"}),": ",(0,s.jsx)(n.a,{href:"https://wokwi.com/projects/335034266233602642",children:"link"})]}),"\n"]}),(0,s.jsx)(n.p,{children:"The connection diagram for this example is shown to follow:"}),(0,s.jsx)(t.A,{src:r(1530).A,alt:"",className:"custom-img"}),(0,s.jsxs)(n.p,{children:["For a better understanding, please see the tutorial ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/esp32-digital-inputs-outputs-arduino/",children:"ESP32 Digital Inputs and Digital Outputs (Arduino IDE)"}),"."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 3"})}),(0,s.jsxs)(n.p,{children:["Automatically adjust the brightness of an LED (connected to the GPIO2 pin). (Code adapted for the ESP32 from the link ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/basics/Fade",children:"Fading a LED"}),")"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"int ledPin = 2;    // GPIO2\r\n\r\nvoid setup() {\r\n  // nothing happens in setup\r\n}\r\n\r\nvoid loop() {\r\n  for (int fadeValue = 0 ; fadeValue <= 255; fadeValue += 5) {\r\n    analogWrite(ledPin, fadeValue);\r\n    delay(30);\r\n  }\r\n\r\n  for (int fadeValue = 255 ; fadeValue >= 0; fadeValue -= 5) {\r\n    analogWrite(ledPin, fadeValue);\r\n    delay(30);\r\n  }\r\n}\n"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example 3 online simulation"}),": ",(0,s.jsx)(n.a,{href:"https://wokwi.com/projects/335030762714694227",children:"link"})]}),"\n"]}),(0,s.jsx)(n.p,{children:"The connection diagram is shown to follow:"}),(0,s.jsx)(t.A,{src:r(7155).A,alt:"",className:"custom-img"}),(0,s.jsxs)(n.p,{children:["For a better undestanding, please visit the link ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/esp32-pwm-arduino-ide/",children:"ESP32 PWM with Arduino IDE (Analog Output)"}),"."]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example 4"})}),(0,s.jsx)(n.p,{children:"Send the voltage value of a potentiometer read through the analog port to the serial port. Additionally, using a PWM signal, vary the brightness level of the built-in LED on the ESP32 board."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'const int analogInPin = 15;  //  GPIO15\r\nconst int analogOutPin = LED_BUILTIN; // ESP32 led\r\n\r\nint sensorValue = 0;        \r\nint outputValue = 0;        \r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop() {\r\n  sensorValue = analogRead(analogInPin);\r\n  outputValue = map(sensorValue, 0, 4095, 0, 255); // ADC de 12 bits\r\n  analogWrite(analogOutPin, outputValue);\r\n\r\n  Serial.print("sensor = ");\r\n  Serial.print(sensorValue);\r\n  Serial.print("\\t output = ");\r\n  Serial.println(outputValue);\r\n\r\n  delay(2);\r\n}\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example 4 online simulation"}),": ",(0,s.jsx)(n.a,{href:"https://wokwi.com/projects/335035080677261908",children:"link"})]}),"\n"]}),(0,s.jsx)(n.p,{children:"The connection diagram is shown to follow:"}),(0,s.jsx)(t.A,{src:r(4973).A,alt:"",className:"custom-img"}),(0,s.jsxs)(n.p,{children:["For a better understanding, please visit the link ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/esp32-adc-analog-read-arduino-ide/",children:"ESP32 ADC \u2013 Read Analog Values with Arduino IDE"}),"."]})]})]})]})]}),(0,s.jsx)(n.h2,{id:"references",children:"References"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/Lectures/",children:"http://www.ee.ic.ac.uk/pcheung/teaching/DE1_EE/Lectures/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/projects-esp32/",children:"https://randomnerdtutorials.com/projects-esp32/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://esphome.io/components/esp32.html",children:"https://esphome.io/components/esp32.html"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.espressif.com/en",children:"https://www.espressif.com/en"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.ai-thinker.com/en/welcome",children:"https://docs.ai-thinker.com/en/welcome"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.platformio.org/en/latest/boards/espressif32/nodemcu-32s2.html",children:"https://docs.platformio.org/en/latest/boards/espressif32/nodemcu-32s2.html"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://reference.arduino.cc/reference/en/libraries/esp32-control/",children:"https://reference.arduino.cc/reference/en/libraries/esp32-control/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www3.ntu.edu.sg/home/ehchua/programming/arduino/arduino.html",children:"https://www3.ntu.edu.sg/home/ehchua/programming/arduino/arduino.html"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www3.ntu.edu.sg/home/ehchua/programming/index.html",children:"https://www3.ntu.edu.sg/home/ehchua/programming/index.html"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://fab.cba.mit.edu/classes/863.16/",children:"https://fab.cba.mit.edu/classes/863.16/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://blob.tomerweller.com/",children:"https://blob.tomerweller.com/"})}),"\n"]})]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>o});r(6540);var s=r(4164);const i={tabItem:"tabItem_Ymn6"};var t=r(4848);function o(e){let{children:n,hidden:r,className:o}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,o),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>A});var s=r(6540),i=r(4164),t=r(3104),o=r(6347),d=r(205),l=r(7485),a=r(1682),c=r(679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:i}}=e;return{value:n,label:r,attributes:s,default:i}}))}(r);return function(e){const n=(0,a.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:r}=e;const i=(0,o.W6)(),t=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})}),[t,i])]}function j(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,t=x(e),[o,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:t}))),[a,h]=u({queryString:r,groupId:i}),[j,f]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,t]=(0,c.Dv)(r);return[i,(0,s.useCallback)((e=>{r&&t.set(e)}),[r,t])]}({groupId:i}),m=(()=>{const e=a??j;return p({value:e,tabValues:t})?e:null})();(0,d.A)((()=>{m&&l(m)}),[m]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),f(e)}),[h,f,t]),tabValues:t}}var f=r(2303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(4848);function b(e){let{className:n,block:r,selectedValue:s,selectValue:o,tabValues:d}=e;const l=[],{blockElementScrollPositionUntilNextRender:a}=(0,t.a_)(),c=e=>{const n=e.currentTarget,r=l.indexOf(n),i=d[r].value;i!==s&&(a(n),o(i))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:d.map((e=>{let{value:n,label:r,attributes:t}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>l.push(e),onKeyDown:h,onClick:c,...t,className:(0,i.A)("tabs__item",m.tabItem,t?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function w(e){let{lazy:n,children:r,selectedValue:i}=e;const t=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function P(e){const n=j(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",m.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(w,{...n,...e})]})}function A(e){const n=(0,f.A)();return(0,g.jsx)(P,{...e,children:h(e.children)},String(n))}},168:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var s=r(4848);const i=function(e){let{src:n,alt:r,caption:i,className:t}=e;return(0,s.jsxs)("div",{className:"custom-img-container",children:[(0,s.jsx)("img",{src:n,alt:r,className:`custom-img ${t}`}),i&&(0,s.jsx)("div",{className:"custom-caption",dangerouslySetInnerHTML:{__html:i}})]})}},9402:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/files/Arduino_Cheat_Sheet-7d4be9d7e666c04557238f9434d3987a.pdf"},5144:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/files/ESP8266_cheat_sheet-11e5fa5e4a9bed8b55ca86a03cf97225.pdf"},8460:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Node-MCU-Pinout-b5e940edf1983aafc3bd5759cdf31425.png"},462:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/analogReadSerial_esp8266_bb-4829cc7e155843418d0b236bb78588f0.jpg"},5428:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/arduino-reference-30e6e0fba5cf1489f9ebcd1708187ea2.png"},1847:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/arduino_uno-pines-1246c20bf82cf9362a2c16ead9dadd2e.png"},1162:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/blink_esp8266_bb-04d543f71ee23e7a8ffa58d3d49d624e.jpg"},5686:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/button_esp8266_bb-dbaae22dfdb36f0d52971ef2eb32ffbb.jpg"},6373:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/ejemplos_arduino-uno-03dc5785265384dcea67bcc8e37f2bde.png"},5557:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp32-devkitC-v4-pinout-9294477a2c80657c0d9a2255da7a2647.png"},4973:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp32_AnalogInOutSerial-96d1afc9d3b22334acd802de0a234694.jpg"},7155:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp32_Fadding-458a15535bd3da4130bf273cfc387a7f.jpg"},4713:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp32_fritzing-65340d35cb5eb1a669bc6b8906ba5e70.jpg"},1530:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp_ledButton-bb4520b736bf9ecee8bc0bbad21a6287.jpg"},6071:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/fading_esp8266_bb-079ac9e979a9ea3cd351e2a066d77aac.jpg"},4366:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/nodemcu_32s_pin-d4220b510607ee71eb341ad4c0b36a35.png"},3913:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/seleccion_nodemcu-32s-baa6e1f390cba1314428499471527a61.png"},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var s=r(6540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);
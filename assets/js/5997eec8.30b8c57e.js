"use strict";(self.webpackChunkmaterial=self.webpackChunkmaterial||[]).push([[8938],{8095:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var s=r(4848),i=r(8453),t=(r(1470),r(9365),r(168));const a={sidebar_position:4,sidebar_label:"Section 4"},o="Perception Layer - Section 4",c={id:"Theory/PerceptionLayer/section4",title:"Perception Layer - Section 4",description:"* Learn the Arduino programming API to serially communicate with external ESP32 hardware",source:"@site/docs/Theory/PerceptionLayer/section4.md",sourceDirName:"Theory/PerceptionLayer",slug:"/Theory/PerceptionLayer/section4",permalink:"/Material/docs/Theory/PerceptionLayer/section4",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,sidebar_label:"Section 4"},sidebar:"theorySidebar",previous:{title:"Section 3",permalink:"/Material/docs/Theory/PerceptionLayer/section3"}},l={},d=[{value:"Main References",id:"main-references",level:2},{value:"Serial communication",id:"serial-communication",level:2},{value:"Arduino Serial Communication API",id:"arduino-serial-communication-api",level:2},{value:"Ports used",id:"ports-used",level:2},{value:"ESP32",id:"esp32",level:3},{value:"Arduino UNO",id:"arduino-uno",level:3},{value:"Aplications of serial communication",id:"aplications-of-serial-communication",level:2},{value:"Scenario 1 - Application Debugging",id:"scenario-1---application-debugging",level:3},{value:"Scenario 2 - Communication with Other Boards and with the PC",id:"scenario-2---communication-with-other-boards-and-with-the-pc",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"perception-layer---section-4",children:"Perception Layer - Section 4"}),"\n",(0,s.jsxs)("div",{style:{textAlign:"justify"},children:[(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{children:(0,s.jsx)(n.strong,{children:"Goals"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Learn the Arduino programming API to serially communicate with external ESP32 hardware"}),"\n",(0,s.jsx)(n.li,{children:"Learn how to perform software debugging for microcontrollers through serial communication"}),"\n",(0,s.jsx)(n.li,{children:"Implement a protocol via serial communication to connect desktop applications with microcontroller firmware"}),"\n"]})]}),(0,s.jsx)(n.h2,{id:"main-references",children:"Main References"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The most part of this lesson is taken from ",(0,s.jsx)(n.strong,{children:"lesson 2, 2 A deeper dive into IoT"})," from ",(0,s.jsx)(n.strong,{children:"IoT for Beginners course"})," (",(0,s.jsx)(n.a,{href:"https://github.com/microsoft/IoT-For-Beginners",children:"link"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Other information was taken from: ",(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/",children:"https://randomnerdtutorials.com/"})]}),"\n",(0,s.jsxs)(n.li,{children:["ESP32 Arduino Core\u2019s documentation (",(0,s.jsx)(n.a,{href:"https://espressif-docs.readthedocs-hosted.com/projects/arduino-esp32/en/latest/",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Serial Communication"})," tutorial from Sparkfun (",(0,s.jsx)(n.a,{href:"https://learn.sparkfun.com/tutorials/serial-communication/serial-intro",children:"link"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Circuit Playground Express Serial Communications"})," tutorial from Adafruit (",(0,s.jsx)(n.a,{href:"https://learn.adafruit.com/circuit-playground-express-serial-communications",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Arduino Lesson 5. The Serial Monitor"})," tutorial from Adafruit (",(0,s.jsx)(n.a,{href:"https://learn.adafruit.com/adafruit-arduino-lesson-5-the-serial-monitor/overview",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"UART: A Hardware Communication Protocol Understanding Universal Asynchronous Receiver/Transmitter"}),": (",(0,s.jsx)(n.a,{href:"https://www.analog.com/en/analog-dialogue/articles/uart-a-hardware-communication-protocol.html",children:"link"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:["Other references:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://randomnerdtutorials.com/",children:"https://randomnerdtutorials.com/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.adafruit.com/",children:"https://www.adafruit.com/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.sparkfun.com/",children:"https://www.sparkfun.com/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.seeedstudio.com/",children:"https://www.seeedstudio.com/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://projecthub.arduino.cc/",children:"https://projecthub.arduino.cc/"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.hackster.io/ubidots/projects",children:"https://www.hackster.io/ubidots/projects"})}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.h2,{id:"serial-communication",children:"Serial communication"}),(0,s.jsxs)(n.p,{children:["Through communication, it is possible for multiple devices to transfer and receive information between them, as shown in the following figure (",(0,s.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-at/en/latest/esp32/Get_Started/Hardware_connection.html",children:"link"}),")."]}),(0,s.jsx)(t.A,{src:r(2233).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsxs)(n.p,{children:["Information can be transferred in a parallel or serial manner. The difference lies in the amount of data that is transferred simultaneously (",(0,s.jsx)(n.a,{href:"https://learn.adafruit.com/circuit-playground-express-serial-communications/overview",children:"link"}),")."]}),(0,s.jsx)(t.A,{src:r(4716).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsx)(n.p,{children:"One of the main problems with parallel data transfer is the number of lines used. On one hand, each line used occupies a hardware port (e.g., a pin of a microcontroller). On the other hand, ports are a limited resource, so if a parallel communication interface is implemented, many of the ports will be used solely for communication tasks. This means that, in the worst case, very few ports will be available for connecting the sensors and actuators needed for the microcontroller to interact with its environment."}),(0,s.jsxs)(n.p,{children:["To address the aforementioned problem, serial communication emerges, in which the information is placed in a data block (usually a byte) and transmitted bit by bit following a format like the one shown below.(",(0,s.jsx)(n.a,{href:"https://learn.sparkfun.com/tutorials/serial-communication/all",children:"link"}),"):"]}),(0,s.jsx)(t.A,{src:r(8850).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsxs)(n.p,{children:["The following figure shows an example in which two data frames are transferred (",(0,s.jsx)(n.a,{href:"https://learn.sparkfun.com/tutorials/serial-communication/all",children:"link"}),"):"]}),(0,s.jsx)(t.A,{src:r(2110).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsxs)(n.p,{children:["The hardware for transmitting data is the ",(0,s.jsx)(n.strong,{children:"bus serial"}),". A serial bus consists of two wires for data transmission: one for sending and one for receiving. Therefore, devices capable of serial communication must have two pins: one associated with the receiver ",(0,s.jsx)(n.strong,{children:"RX"})," and another associated with the transmitter ",(0,s.jsx)(n.strong,{children:"TX"}),".\r\nIt is important to note that these labels ",(0,s.jsx)(n.strong,{children:"RX"})," and ",(0,s.jsx)(n.strong,{children:"TX"})," refer to the device itself. Therefore, the ",(0,s.jsx)(n.strong,{children:"RX"})," of one device should connect to the ",(0,s.jsx)(n.strong,{children:"TX"})," of the other and vice versa. The following figure clarifies this:"]}),(0,s.jsx)(t.A,{src:r(2302).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsxs)(n.p,{children:["The hardware responsible for converting data from parallel to serial (and vice versa) and ensuring their serial transfer is known as ",(0,s.jsx)(n.strong,{children:"UART (Universal Asynchronous Receiver/Transmitter)"})," and is integrated into microcontrollers:"]}),(0,s.jsx)(t.A,{src:r(2826).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsxs)(n.p,{children:["However, it is important to clarify that serial communication using ",(0,s.jsx)(n.strong,{children:"UART"})," is not the only existing method, as new protocols have emerged over the years, among which the following stand out:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"USB (Universal Serial Bus)"}),"\n",(0,s.jsx)(n.li,{children:"Ethernet"}),"\n",(0,s.jsx)(n.li,{children:"SPI (Serial Peripherical Interface)"}),"\n",(0,s.jsx)(n.li,{children:"I2C (Inter-Integrated Circuit)"}),"\n"]}),(0,s.jsx)(n.h2,{id:"arduino-serial-communication-api",children:"Arduino Serial Communication API"}),(0,s.jsxs)(n.p,{children:["In the Arduino API (",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/",children:"link"}),"), you can find the main functions, classes, and data structures used to write programs in Arduino. In the ",(0,s.jsx)(n.a,{href:"https://www.arduino.cc/reference/en/language/functions/communication/serial/",children:"Serial"})," link of the ",(0,s.jsx)(n.strong,{children:"Communication"})," section, you can access the documentation for all the functions used to establish serial communication."]}),(0,s.jsx)(t.A,{src:r(2845).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsx)(n.p,{children:"The following are descriptions of the main functions of the API most commonly used for serial communication:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.begin()"})}),(0,s.jsxs)(n.td,{children:["Sets the serial transmission speed (bits per second = baud).",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.begin(speed)"})," ",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"speed"})}),": Transmission speed (",(0,s.jsx)(n.strong,{children:"baudrate"}),"). Speed can only take the following values: ",(0,s.jsx)(n.code,{children:"300, 1200, 2400, 4800, 9600, 14400, 19200, 28800,  38400, 57600, 115200"})]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.print()"})}),(0,s.jsxs)(n.td,{children:["Prints data to the serial port in ASCII format ",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.print(val)"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.print(val, format)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"val"})}),": Value to print. The value can be of any type "]}),(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"format"})}),": ASCII representation format (",(0,s.jsx)(n.code,{children:"DEC"}),", ",(0,s.jsx)(n.code,{children:"HEX"}),", ",(0,s.jsx)(n.code,{children:"OCT"})," o ",(0,s.jsx)(n.code,{children:"BIN"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.available()"})}),(0,s.jsxs)(n.td,{children:["Gets the number of bytes (characters) available to read from the serial port. These are data that have already arrived and are stored in the serial receive buffer (which stores 64 bytes).",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.available()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Returned Values"}),": Number of available bytes to read."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.read()"})}),(0,s.jsxs)(n.td,{children:["Reads a data byte that comes in through the serial.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"Serial.read()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(n.strong,{children:"Returned Values"}),": First byte of the available serial data (or ",(0,s.jsx)(n.code,{children:"-1"})," if no data is available). The data type read is ",(0,s.jsx)(n.code,{children:"int"}),"."]})]})]})]}),(0,s.jsx)(n.p,{children:"Other functions of the API are summarized in the following table:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Function"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.end()"})}),(0,s.jsxs)(n.td,{children:["Disables serial communication, allowing the ",(0,s.jsx)(n.code,{children:"RX"})," and ",(0,s.jsx)(n.code,{children:"TX"})," pins to be used as input and output (",(0,s.jsx)(n.code,{children:"I/O"}),") pins."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.write(value)"})}),(0,s.jsxs)(n.td,{children:["Writes binary data to the serial port. The data is sent as a byte or a series of bytes (no human-readable: ",(0,s.jsx)(n.code,{children:"raw"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.peek()"})}),(0,s.jsxs)(n.td,{children:["Allows reading without removing data. It returns the next byte  (as ",(0,s.jsx)(n.code,{children:"int"}),") of the incoming serial data without removing it from the internal serial buffer (or ",(0,s.jsx)(n.code,{children:"-1"})," if no data is available)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Serial.flush()"})}),(0,s.jsx)(n.td,{children:"Waits until the transmission of outgoing serial data is complete."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"serialEvent()"})}),(0,s.jsxs)(n.td,{children:["Function that is called when serial data is available. For more information, see the following link ",(0,s.jsx)(n.a,{href:"https://docs.arduino.cc/built-in-examples/communication/SerialEvent",children:"link"})]})]})]})]}),(0,s.jsxs)(n.p,{children:["It is important to clarify that the following functions are part of the Arduino API. If you are using the ESP32, it is necessary to check if these functions have been ported to this platform on the ",(0,s.jsx)(n.strong,{children:"Arduino core for the ESP32, ESP32-S2, ESP32-S3 and ESP32-C3"})," page (",(0,s.jsx)(n.a,{href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/",children:"link"}),"). Otherwise, the programming model changes, and you will need to use the ",(0,s.jsx)(n.strong,{children:"ESP-IDF Programming Guide"})," (",(0,s.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-idf/en/latest/esp32/",children:"link"}),"). Fortunately, serial communication via ",(0,s.jsx)(n.strong,{children:"UART"})," is supported by the Arduino-ESP32 API (see ",(0,s.jsx)(n.a,{href:"https://docs.espressif.com/projects/arduino-esp32/en/latest/libraries.html",children:"table"}),")."]}),(0,s.jsx)(n.h2,{id:"ports-used",children:"Ports used"}),(0,s.jsx)(n.p,{children:"Before starting, it is necessary to determine the serial communication protocols supported by the microcontroller and the pins on which they are implemented. This can be done by reviewing the pinout diagram in the board's documentation. The following shows the case for the Arduino UNO and ESP32 boards available in the laboratory:"}),(0,s.jsx)(n.h3,{id:"esp32",children:"ESP32"}),(0,s.jsxs)(n.p,{children:["The following shows the pinout diagram of the ",(0,s.jsx)(n.strong,{children:"NODEMCU ESP-32S"})," board, which is available in the laboratory:"]}),(0,s.jsx)(t.A,{src:r(4366).A,alt:"",className:"custom-img"}),(0,s.jsxs)(n.p,{children:["If you consult the pin definition table in the datasheet of the ",(0,s.jsx)(n.strong,{children:"Nodemcu-32s"})," (",(0,s.jsx)(n.a,{href:"https://docs.ai-thinker.com/_media/esp32/docs/nodemcu-32s_product_specification.pdf",children:"link"}),"), the pins of interest will be:"]}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"No."}),(0,s.jsx)(n.th,{children:"Pin Name"}),(0,s.jsx)(n.th,{children:"Functional Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"34"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"RX"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"GPIO3"}),", ",(0,s.jsx)(n.code,{children:"U0RXD"}),", ",(0,s.jsx)(n.code,{children:"CLK_OUT2"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"35"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TX"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"GPIO1"}),", ",(0,s.jsx)(n.code,{children:"U0TXD"}),", ",(0,s.jsx)(n.code,{children:"CLK_OUT3"}),", ",(0,s.jsx)(n.code,{children:"EMAC_RXD2"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"16"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SD2"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"GPIO9"}),", ",(0,s.jsx)(n.code,{children:"SD_DATA2"}),", ",(0,s.jsx)(n.code,{children:"SPIHD"}),", ",(0,s.jsx)(n.code,{children:"HS1_DATA2"}),", ",(0,s.jsx)(n.code,{children:"U1RXD"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"17"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"SD3"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"GPIO10"}),", ",(0,s.jsx)(n.code,{children:"SD_DATA3"}),", ",(0,s.jsx)(n.code,{children:"SPIWP"}),", ",(0,s.jsx)(n.code,{children:"HS1_DATA3"}),", ",(0,s.jsx)(n.code,{children:"U1TXD"})]})]})]})]}),(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"TX"})," and ",(0,s.jsx)(n.code,{children:"RX"})," pins are connected to the chip that performs the Serial to USB conversion, so they cannot be used for other purposes when they are being used for serial transmission in the application running on the board. For more information, you can consult the section ",(0,s.jsx)(n.strong,{children:"Establish Serial Connection with ESP32"})," (",(0,s.jsx)(n.a,{href:"https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/establish-serial-connection.html",children:"link"}),")."]}),(0,s.jsx)(n.h3,{id:"arduino-uno",children:"Arduino UNO"}),(0,s.jsx)(n.p,{children:"The following shows the pinout diagram for the Arduino UNO (the other board available in the laboratory)."}),(0,s.jsx)(t.A,{src:r(6256).A,alt:"",className:"custom-img"}),(0,s.jsx)(n.p,{children:"For this case:"}),(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"No."}),(0,s.jsx)(n.th,{children:"Pin Name"}),(0,s.jsx)(n.th,{children:"Functional Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"0"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"RX<-0"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"D0/RX"}),", ",(0,s.jsx)(n.code,{children:"PD0"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"1"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"TX->1"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"D1/TX"}),", ",(0,s.jsx)(n.code,{children:"PD1"})]})]})]})]}),(0,s.jsx)(n.p,{children:"Once these pins are connected, they should not be used as digital ports if the Arduino application uses the serial port."}),(0,s.jsx)(n.h2,{id:"aplications-of-serial-communication",children:"Aplications of serial communication"}),(0,s.jsx)(n.p,{children:"Any of the boards available in the laboratory has at least one serial port (UART or SUART). Through this port, it is possible to:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The communication between two boards through the cross-connection of their transmission (",(0,s.jsx)(n.code,{children:"TX"}),") and reception (",(0,s.jsx)(n.code,{children:"RX"}),") pins (",(0,s.jsx)(n.a,{href:"https://www.hackster.io/onedeadmatch/custom-uart-protocol-on-esp32-1e2fa4",children:"link"}),")."]}),"\n",(0,s.jsx)(t.A,{src:r(1566).A,alt:"",className:"custom-img"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The communication between a board and the computer via USB (using a USB to Serial adapter), which is usually integrated into the boards (",(0,s.jsx)(n.a,{href:"https://www.mathworks.com/help/supportpkg/arduinoio/ug/configure-setup-for-esp32-hardware.html",children:"link"}),")."]}),"\n",(0,s.jsx)(t.A,{src:r(7568).A,alt:"",className:"custom-img",caption:"XXX"}),"\n"]}),"\n"]}),(0,s.jsx)(n.p,{children:"When using the serial port, we mainly have two application scenarios:"}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Debugging complex applications."}),"\n",(0,s.jsx)(n.li,{children:"Communication and transmission of different types of information (commands, status, variable values, etc.) depending on the type of application being used."}),"\n"]}),(0,s.jsx)(n.h3,{id:"scenario-1---application-debugging",children:"Scenario 1 - Application Debugging"}),(0,s.jsxs)(n.p,{children:["One of the most useful applications of the serial port is that it facilitates ",(0,s.jsx)(n.strong,{children:"debugging"})," applications. Through it, you can print ",(0,s.jsx)(n.strong,{children:"log messages"})," during runtime, which help verify the correct functioning of the program logic by using a program like the serial monitor or any similar software."]}),(0,s.jsx)(n.p,{children:"It is very common to print variables (which can indicate the status or value of a sensor, application messages, etc.)."}),(0,s.jsxs)(n.p,{children:["In the following example (",(0,s.jsx)(n.a,{href:"https://github.com/UdeA-IoT/clases-IoT_capa-percepcion_2023-2/tree/main/dia4/debug_esp32",children:"link"}),"), it is shown how to set up the following setup:"]}),(0,s.jsx)(t.A,{src:r(6341).A,alt:"",className:"custom-img",caption:"XXX"}),(0,s.jsx)(n.h3,{id:"scenario-2---communication-with-other-boards-and-with-the-pc",children:"Scenario 2 - Communication with Other Boards and with the PC"}),(0,s.jsx)(n.p,{children:"Through read and write operations on the serial port, it is possible to transmit information to and from another hardware device that has a serial interface (another board, computer, or specific hardware)."}),(0,s.jsxs)(n.p,{children:["To understand this, the following ",(0,s.jsx)(n.a,{href:"https://github.com/UdeA-IoT/clases-IoT_capa-percepcion_2023-2/tree/main/dia4/serial-esp32-arduino",children:"directory"})," will explain step-by-step an application in which commands are sent via serial from the PC to the ESP32 for a simple task such as turning an LED on and off."]}),(0,s.jsx)(t.A,{src:r(5555).A,alt:"",className:"custom-img",caption:"XXX"})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var s=r(4164);const i={tabItem:"tabItem_Ymn6"};var t=r(4848);function a(e){let{children:n,hidden:r,className:a}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,a),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>y});var s=r(6540),i=r(4164),t=r(3104),a=r(6347),o=r(205),c=r(7485),l=r(1682),d=r(679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:i}}=e;return{value:n,label:r,attributes:s,default:i}}))}(r);return function(e){const n=(0,l.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const i=(0,a.W6)(),t=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,c.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(i.location.search);n.set(t,e),i.replace({...i.location,search:n.toString()})}),[t,i])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,t=u(e),[a,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:t}))),[l,h]=p({queryString:r,groupId:i}),[x,j]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,t]=(0,d.Dv)(r);return[i,(0,s.useCallback)((e=>{r&&t.set(e)}),[r,t])]}({groupId:i}),f=(()=>{const e=l??x;return m({value:e,tabValues:t})?e:null})();(0,o.A)((()=>{f&&c(f)}),[f]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),j(e)}),[h,j,t]),tabValues:t}}var j=r(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=r(4848);function g(e){let{className:n,block:r,selectedValue:s,selectValue:a,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,t.a_)(),d=e=>{const n=e.currentTarget,r=c.indexOf(n),i=o[r].value;i!==s&&(l(n),a(i))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;n=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;n=c[r]??c[c.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":r},n),children:o.map((e=>{let{value:n,label:r,attributes:t}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>c.push(e),onKeyDown:h,onClick:d,...t,className:(0,i.A)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function w(e){let{lazy:n,children:r,selectedValue:i}=e;const t=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=t.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:t.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=x(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,b.jsx)(g,{...n,...e}),(0,b.jsx)(w,{...n,...e})]})}function y(e){const n=(0,j.A)();return(0,b.jsx)(v,{...e,children:h(e.children)},String(n))}},168:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var s=r(4848);const i=function(e){let{src:n,alt:r,caption:i,className:t}=e;return(0,s.jsxs)("div",{className:"custom-img-container",children:[(0,s.jsx)("img",{src:n,alt:r,className:`custom-img ${t}`}),i&&(0,s.jsx)("div",{className:"custom-caption",dangerouslySetInnerHTML:{__html:i}})]})}},2845:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/API_serial-29f7096f522e08eff39cc6d3f9b65d29.png"},6256:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/Pinout-UNOrev3_latest-092ffe1feda7f5f7ba24d00546f9f353.png"},5555:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/comunicacion_serial-c2765c140e29e87c84486320b835a033.png"},2233:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp32-wroom-hw-connection-e5a39450ac8e6a0feea20dfdea57f84d.png"},6341:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp32_debug-serial-6b22ba2c317c2eb0bdcc828610a6150b.png"},7568:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/esp32_usb-7e17a30e73c04e524da615f9f32c1924.png"},4366:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/nodemcu_32s_pin-d4220b510607ee71eb341ad4c0b36a35.png"},1566:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/oscup_mcu_mcu-e24bce41f98d51990b31ab042dc6af1a.jpg"},2302:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/pines_serial-0be65f2e52f84ec7eb0e6d2f996f1751.png"},8850:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/serial_trama-5c0d263b0825d29cec77ce2f23d9471b.png"},2110:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/trama_datos_serial-1ec3ed592bbc351f58998df71bcdeccb.png"},4716:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/transferencia_de_bits-6f91be3f66ee0562b7b0ea2b2c594df4.png"},2826:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/uart-c8bab03e6f3b695973436c37816a6087.png"},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);
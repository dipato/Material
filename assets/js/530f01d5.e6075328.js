"use strict";(self.webpackChunkmaterial=self.webpackChunkmaterial||[]).push([[3461],{4219:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>x,frontMatter:()=>d,metadata:()=>c,toc:()=>o});var s=n(4848),i=n(8453),t=(n(1470),n(9365),n(168));const d={sidebar_position:6},l="Laboratory 6",c={id:"Labs/lab6",title:"Laboratory 6",description:"Summary",source:"@site/docs/Labs/lab6.md",sourceDirName:"Labs",slug:"/Labs/lab6",permalink:"/Material/docs/Labs/lab6",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"labsSidebar",previous:{title:"Laboratory 5",permalink:"/Material/docs/Labs/lab5"},next:{title:"Laboratory 7",permalink:"/Material/docs/Labs/lab7"}},a={},o=[{value:"Summary",id:"summary",level:2},{value:"Hardware",id:"hardware",level:2},{value:"Components",id:"components",level:3},{value:"Schematics",id:"schematics",level:3},{value:"Connection diagram",id:"connection-diagram",level:3},{value:"Software",id:"software",level:2},{value:"Setting",id:"setting",level:3},{value:"Used libraries",id:"used-libraries",level:4},{value:"Program",id:"program",level:4},{value:"Application test",id:"application-test",level:4},{value:"Other resources",id:"other-resources",level:2},{value:"Summary",id:"summary-1",level:2},{value:"Hardware",id:"hardware-1",level:2},{value:"Components",id:"components-1",level:3},{value:"Schematics",id:"schematics-1",level:3},{value:"Connection diagram",id:"connection-diagram-1",level:3},{value:"Software",id:"software-1",level:2},{value:"Platformio setting",id:"platformio-setting",level:3},{value:"Other resources",id:"other-resources-1",level:2},{value:"Before to start",id:"before-to-start",level:2},{value:"About LCD displays",id:"about-lcd-displays",level:2},{value:"Pins and connection",id:"pins-and-connection",level:3},{value:"Memory of Hitachi HD44780 controller",id:"memory-of-hitachi-hd44780-controller",level:3},{value:"Basic commands",id:"basic-commands",level:3},{value:"Busy Flag (BF - BUSY FLAG)",id:"busy-flag-bf---busy-flag",level:3},{value:"Handling the LCD using Arduino",id:"handling-the-lcd-using-arduino",level:2},{value:"Summary",id:"summary-2",level:2},{value:"Hardware",id:"hardware-2",level:2},{value:"Components",id:"components-2",level:3},{value:"Schematics",id:"schematics-2",level:3},{value:"Connection diagram",id:"connection-diagram-2",level:3},{value:"Software",id:"software-2",level:2},{value:"Program",id:"program-1",level:4},{value:"References",id:"references",level:2}];function h(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"laboratory-6",children:"Laboratory 6"}),"\n",(0,s.jsxs)("div",{style:{textAlign:"justify"},children:[(0,s.jsx)(r.h1,{id:"activity-1---temperature-and-humidity-measurement-using-the-esp32",children:"Activity 1 - Temperature and Humidity Measurement using the ESP32"}),(0,s.jsx)(r.h2,{id:"summary",children:"Summary"}),(0,s.jsx)(r.p,{children:"Create an application that reads the temperature and humidity from a DHT11 sensor and prints the values using the serial monitor."}),(0,s.jsx)(r.h2,{id:"hardware",children:"Hardware"}),(0,s.jsx)(r.h3,{id:"components",children:"Components"}),(0,s.jsx)(r.p,{children:"The following table shows the main components of the circuit to be assembled:"}),(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Components"}),(0,s.jsx)(r.th,{children:"Quantity"}),(0,s.jsx)(r.th,{children:"Observations"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"ESP32"}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"DHT11 Temperature and Humidity Module"}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsxs)(r.td,{children:["Available in Elegoo kit (",(0,s.jsx)(r.a,{href:"https://cdn.sparkfun.com/assets/b/3/f/9/d/OKY3068-1.pdf",children:"datasheet"}),")"]})]})]})]}),(0,s.jsxs)(r.p,{children:["It is important to know the sensor pins. Below is a pinout map (",(0,s.jsx)(r.a,{href:"https://components101.com/sensors/dht11-temperature-sensor",children:"link"}),"):"]}),(0,s.jsx)(t.A,{src:n(5746).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.p,{children:"The Elegoo kit includes a module that uses this sensor. It is shown below along with the description of the connection pins:"}),(0,s.jsx)(t.A,{src:n(7623).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h3,{id:"schematics",children:"Schematics"}),(0,s.jsx)(t.A,{src:n(9791).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h3,{id:"connection-diagram",children:"Connection diagram"}),(0,s.jsx)(r.p,{children:"The connection between DHT11 sensor and the ESP32 is shown in the following table:"}),(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"ESP32"}),(0,s.jsx)(r.th,{children:"DHT11"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P2 (GPIO2)"}),(0,s.jsx)(r.td,{children:"S"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"3.3V (VIN3.3V)"}),(0,s.jsx)(r.td,{children:"VSS"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"GND (GND)"}),(0,s.jsx)(r.td,{children:"GND"})]})]})]}),(0,s.jsx)(r.p,{children:"The connection diagram is shown to follow:"}),(0,s.jsx)(t.A,{src:n(357).A,alt:"",className:"custom-img"}),(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Fritzing File"}),"\r\nThe example Fritzing file ",(0,s.jsx)(r.strong,{children:"dh11-esp32.fzz"})," can be download from ",(0,s.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(148).A+"",children:"[link]"})]}),"\n"]}),(0,s.jsx)(r.h2,{id:"software",children:"Software"}),(0,s.jsxs)(r.p,{children:["This example was coded and tested in the ",(0,s.jsx)(r.strong,{children:"Arduino IDE v1"}),". As a review, try to replicate the procedure in Platformio."]}),(0,s.jsx)(r.h3,{id:"setting",children:"Setting"}),(0,s.jsx)(r.h4,{id:"used-libraries",children:"Used libraries"}),(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsxs)(r.p,{children:["As mentioned at the beginning, this example was tested using the ",(0,s.jsx)(r.strong,{children:"Arduino IDE v1"}),". To carry out the installation in the new version of the ",(0,s.jsx)(r.strong,{children:"Arduino IDE"})," (",(0,s.jsx)(r.strong,{children:"Arduino v2"}),"), follow the same procedure using the instructions given on the ",(0,s.jsx)(r.strong,{children:"Installing libraries - Arduino v2"})," page (",(0,s.jsx)(r.a,{href:"https://docs.arduino.cc/software/ide-v2/tutorials/ide-v2-installing-a-library/",children:"link"}),")."]})}),(0,s.jsx)(r.p,{children:"The following libreries were added:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"DHT"})}),"\n",(0,s.jsx)(t.A,{src:n(5266).A,alt:"",className:"custom-img"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Adafruit Unified Sensor"})}),"\n",(0,s.jsx)(t.A,{src:n(6113).A,alt:"",className:"custom-img"}),"\n"]}),"\n"]}),(0,s.jsx)(r.h4,{id:"program",children:"Program"}),(0,s.jsxs)(r.p,{children:["The coded program (",(0,s.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(1532).A+"",children:"dth11_esp32.ino"}),") is shown to follow:"]}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include "DHT.h"\r\n\r\n#define DHTPIN 2     // Digital pin connected to the DHT sensor\r\n// Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --\r\n// Pin 15 can work but DHT must be disconnected during program upload.\r\n\r\n// Uncomment whatever type you\'re using!\r\n#define DHTTYPE DHT11   // DHT 11\r\n//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321\r\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)\r\n\r\n// Connect pin 1 (on the left) of the sensor to +5V\r\n// NOTE: If using a board with 3.3V logic like an Arduino Due connect pin 1\r\n// to 3.3V instead of 5V!\r\n// Connect pin 2 of the sensor to whatever your DHTPIN is\r\n// Connect pin 3 (on the right) of the sensor to GROUND (if your sensor has 3 pins)\r\n// Connect pin 4 (on the right) of the sensor to GROUND and leave the pin 3 EMPTY (if your sensor has 4 pins)\r\n// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor\r\n\r\n// Initialize DHT sensor.\r\n// Note that older versions of this library took an optional third parameter to\r\n// tweak the timings for faster processors.  This parameter is no longer needed\r\n// as the current DHT reading algorithm adjusts itself to work on faster procs.\r\nDHT dht(DHTPIN, DHTTYPE);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  Serial.println(F("DHTxx test!"));\r\n\r\n  dht.begin();\r\n}\r\n\r\nvoid loop() {\r\n  // Wait a few seconds between measurements.\r\n  delay(2000);\r\n\r\n  // Reading temperature or humidity takes about 250 milliseconds!\r\n  // Sensor readings may also be up to 2 seconds \'old\' (its a very slow sensor)\r\n  float h = dht.readHumidity();\r\n  // Read temperature as Celsius (the default)\r\n  float t = dht.readTemperature();\r\n  // Read temperature as Fahrenheit (isFahrenheit = true)\r\n  float f = dht.readTemperature(true);\r\n\r\n  // Check if any reads failed and exit early (to try again).\r\n  if (isnan(h) || isnan(t) || isnan(f)) {\r\n    Serial.println(F("Failed to read from DHT sensor!"));\r\n    return;\r\n  }\r\n\r\n  // Compute heat index in Fahrenheit (the default)\r\n  float hif = dht.computeHeatIndex(f, h);\r\n  // Compute heat index in Celsius (isFahreheit = false)\r\n  float hic = dht.computeHeatIndex(t, h, false);\r\n\r\n  Serial.print(F("Humidity: "));\r\n  Serial.print(h);\r\n  Serial.print(F("%  Temperature: "));\r\n  Serial.print(t);\r\n  Serial.print(F("\xb0C "));\r\n  Serial.print(f);\r\n  Serial.print(F("\xb0F  Heat index: "));\r\n  Serial.print(hic);\r\n  Serial.print(F("\xb0C "));\r\n  Serial.print(hif);\r\n  Serial.println(F("\xb0F"));\r\n}\n'})}),(0,s.jsx)(r.h4,{id:"application-test",children:"Application test"}),(0,s.jsx)(r.p,{children:"When the application is tested, the output has the following format:"}),(0,s.jsx)(t.A,{src:n(8067).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h2,{id:"other-resources",children:"Other resources"}),(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Online simulation"}),"\r\nThe simulation of the downloaded program can be found in (",(0,s.jsx)(r.a,{href:"https://wokwi.com/projects/357776308749643777",children:"link"}),")"]}),"\n"]}),(0,s.jsx)(r.h1,{id:"activity-2---connecting-a-4x4-matrix-keypad-to-an-esp32",children:"Activity 2 - Connecting a 4x4 Matrix Keypad to an ESP32"}),(0,s.jsx)(r.h2,{id:"summary-1",children:"Summary"}),(0,s.jsxs)(r.p,{children:["Create an application for the ESP32 that serially displays all the keys from a 4x4 matrix keypad except for the ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"#"})})," and ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"*"})})," keys. When either of these keys is pressed, the built-in LED on the board will turn on and off in such a way that one key turns it off, and the other key turns it on."]}),(0,s.jsx)(r.h2,{id:"hardware-1",children:"Hardware"}),(0,s.jsx)(r.h3,{id:"components-1",children:"Components"}),(0,s.jsx)(r.p,{children:"The following table shows the main components to be used in the circuit:"}),(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Components"}),(0,s.jsx)(r.th,{children:"Quantity"}),(0,s.jsx)(r.th,{children:"Observations"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"ESP32"}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Membrane Matrix Keypad"}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsxs)(r.td,{children:["Available in Elegoo kit (",(0,s.jsx)(r.a,{href:"https://cdn.sparkfun.com/assets/f/f/a/5/0/DS-16038.pdf",children:"datasheet"}),")"]})]})]})]}),(0,s.jsx)(r.p,{children:"It is important to know the pins of the matrix keypad before starting. Below is a pinout map:"}),(0,s.jsx)(t.A,{src:n(1161).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h3,{id:"schematics-1",children:"Schematics"}),(0,s.jsx)(t.A,{src:n(8859).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h3,{id:"connection-diagram-1",children:"Connection diagram"}),(0,s.jsx)(r.p,{children:"The connection between the 4x4 membrane matrix keypad and the ESP32 is shown in the following table:"}),(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"ESP32"}),(0,s.jsx)(r.th,{children:"4x4 Matrix Keypad"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P23 (GPIO23)"}),(0,s.jsx)(r.td,{children:"R1"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P22 (GPIO22)"}),(0,s.jsx)(r.td,{children:"R2"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P21 (GPIO21)"}),(0,s.jsx)(r.td,{children:"R3"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P19 (GPIO19)"}),(0,s.jsx)(r.td,{children:"R4"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P5 (GPIO5)"}),(0,s.jsx)(r.td,{children:"C1"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P17 (GPIO17)"}),(0,s.jsx)(r.td,{children:"C2"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P16 (GPIO16)"}),(0,s.jsx)(r.td,{children:"C3"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"P4 (GPIO4)"}),(0,s.jsx)(r.td,{children:"C4"})]})]})]}),(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Fritzing file"}),"\r\nThe Fritzing file related to the project is ",(0,s.jsx)(r.strong,{children:"esp32_keypad.fzz"})," ",(0,s.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(1080).A+"",children:"[download]"})]}),"\n"]}),(0,s.jsx)(r.h2,{id:"software-1",children:"Software"}),(0,s.jsx)(r.h3,{id:"platformio-setting",children:"Platformio setting"}),(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Create and configure the project (in our case it was named ",(0,s.jsx)(r.strong,{children:"test-keypad_ESP32"}),"), using the following parameters:"]}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Parameter"}),(0,s.jsx)(r.th,{children:"Value"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Name"})}),(0,s.jsx)(r.td,{children:"test-keypad_ESP32"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Board"})}),(0,s.jsx)(r.td,{children:"NodeMCU-32S"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"Framework"})}),(0,s.jsx)(r.td,{children:"Arduino"})]})]})]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Add the necessary libraries and their dependencies (the latter is done automatically). In our case, we installed the ",(0,s.jsx)(r.strong,{children:"Keypad"})," library. To do this, follow these steps:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Search for the library by name (",(0,s.jsx)(r.strong,{children:"Keypad"})," in our case). If everything is correct, a list of libraries will appear:"]}),"\n"]}),"\n",(0,s.jsx)(t.A,{src:n(4833).A,alt:"",className:"custom-img"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Select the library you want to add from the list (",(0,s.jsx)(r.strong,{children:"Keypad"})," in our case), then proceed to add it to the project.."]}),"\n"]}),"\n",(0,s.jsx)(t.A,{src:n(4888).A,alt:"",className:"custom-img"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["From the list of projects that appear, select the project to which you want to add the library. For this example, the project to choose is ",(0,s.jsx)(r.strong,{children:"test-keypad_ESP32"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.A,{src:n(6407).A,alt:"",className:"custom-img"}),"\n",(0,s.jsxs)(r.p,{children:["Once the process of adding the necessary libraries is complete, the ",(0,s.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(8331).A+"",children:(0,s.jsx)(r.strong,{children:"platformio.ini"})})," file is updated with the library information."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ini",children:"; PlatformIO Project Configuration File\r\n;\r\n;   Build options: build flags, source filter\r\n;   Upload options: custom upload port, speed and extra flags\r\n;   Library options: dependencies, extra library storages\r\n;   Advanced options: extra scripting\r\n;\r\n; Please visit documentation for the other options and examples\r\n; https://docs.platformio.org/page/projectconf.html\r\n\r\n[env:nodemcu-32s]\r\nplatform = espressif32\r\nboard = nodemcu-32s\r\nframework = arduino\r\nlib_deps = chris--a/Keypad@^3.1.1\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Proceed to code the program in the ",(0,s.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(2284).A+"",children:(0,s.jsx)(r.strong,{children:"main.cpp"})})," file. For our case, it looks as follows::"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include <Arduino.h>\r\n#include <Keypad.h>\r\n\r\nconst byte ROWS = 4; // Four rows\r\nconst byte COLS = 4; // Three columns\r\n\r\n// Define the Keymap\r\nchar keys[ROWS][COLS] = {\r\n  {'1','2','3','A'},\r\n  {'4','5','6','B'},\r\n  {'7','8','9','C'},\r\n  {'#','0','*','D'}\r\n};\r\n\r\n// Conections ESP32 - Keypad\r\n#define ROW1 23\r\n#define ROW2 22\r\n#define ROW3 21\r\n#define ROW4 19\r\n#define COL1 5\r\n#define COL2 17\r\n#define COL3 16\r\n#define COL4 4\r\n\r\n// Connect keypad ROW1, ROW2, ROW3 and ROW4 to these Arduino pins.\r\nbyte rowPins[ROWS] = { ROW1, ROW2, ROW3, ROW4 };\r\n// Connect keypad COL0, COL1, COL2 and COL3 to these Arduino pins.\r\nbyte colPins[COLS] = { COL1, COL2, COL3, COL4 }; \r\n\r\n// Create the Keypad\r\nKeypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );\r\n\r\nconst int ledpin = 2;\r\n\r\nvoid setup()\r\n{\r\n  pinMode(ledpin,OUTPUT);\r\n  digitalWrite(ledpin, HIGH);\r\n  Serial.begin(9600);\r\n  Serial.println(\"System Ok...\");\r\n}\r\n\r\nvoid loop()\r\n{\r\n  char key = kpd.getKey();\r\n  if(key)  // Check for a valid key.\r\n  {\r\n    switch (key)\r\n    {\r\n      case '*':\r\n        digitalWrite(ledpin, LOW);\r\n        break;\r\n      case '#':\r\n        digitalWrite(ledpin, HIGH);\r\n        break;\r\n      default:\r\n        Serial.println(key);\r\n    }\r\n  }\r\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Compile the program to check for errors."}),"\n"]}),"\n"]}),(0,s.jsx)(t.A,{src:n(8718).A,alt:"",className:"custom-img"}),(0,s.jsxs)(r.ol,{start:"5",children:["\n",(0,s.jsx)(r.li,{children:"If there are no errors, proceed to upload the program to the ESP32."}),"\n"]}),(0,s.jsx)(t.A,{src:n(4469).A,alt:"",className:"custom-img"}),(0,s.jsxs)(r.ol,{start:"6",children:["\n",(0,s.jsx)(r.li,{children:"If everything goes well, you can proceed to test the program. Since the example uses serial communication, open the serial terminal:"}),"\n"]}),(0,s.jsx)(t.A,{src:n(7819).A,alt:"",className:"custom-img"}),(0,s.jsxs)(r.p,{children:["To exit the serial terminal, use the key combination ",(0,s.jsxs)(r.strong,{children:[(0,s.jsx)(r.code,{children:"CTRL"})," + ",(0,s.jsx)(r.code,{children:"C"})]}),"."]}),(0,s.jsxs)(r.p,{children:["Optionally, you can also use the ",(0,s.jsx)(r.strong,{children:"serial monitor"})," for better debugging. The following figure shows this:"]}),(0,s.jsx)(t.A,{src:n(2466).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h2,{id:"other-resources-1",children:"Other resources"}),(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Online simulation"}),"\r\nThe simulation of the downloaded program can be found in (",(0,s.jsx)(r.a,{href:"https://wokwi.com/projects/375583898825876481",children:"link"}),")"]}),"\n"]}),(0,s.jsx)(r.h1,{id:"activity-3---handling-the-lcd",children:"Activity 3 - Handling the LCD"}),(0,s.jsx)(r.h2,{id:"before-to-start",children:"Before to start"}),(0,s.jsx)(r.p,{children:"Main references:"}),(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Microcontroladores PIC - Programaci\xf3n en BASIC: componentes-adicionales"})," (",(0,s.jsx)(r.a,{href:"https://www.mikroe.com/ebooks/microcontroladores-pic-programacion-en-basic/componentes-adicionales",children:"link"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Character LCDs - Adafruit"})," (",(0,s.jsx)(r.a,{href:"https://learn.adafruit.com/character-lcds",children:"link"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Basic Character LCD Hookup Guide - Sparkfun"})," (",(0,s.jsx)(r.a,{href:"https://learn.sparkfun.com/tutorials/basic-character-lcd-hookup-guide/all",children:"link"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Random Nerd Tutorials"})," (",(0,s.jsx)(r.a,{href:"https://randomnerdtutorials.com/projects-arduino/",children:"link"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"SparkFun Inventor's Kit Experiment Guide - v4.0 --\x3e Project 4: Display"})," (",(0,s.jsx)(r.a,{href:"https://learn.sparkfun.com/tutorials/sparkfun-inventors-kit-experiment-guide---v40/project-4-display",children:"link"}),")"]}),"\n"]}),(0,s.jsx)(r.h2,{id:"about-lcd-displays",children:"About LCD displays"}),(0,s.jsx)(r.h3,{id:"pins-and-connection",children:"Pins and connection"}),(0,s.jsx)(r.p,{children:"The following figure shows a 16x2 LCD with its respective interface pins:"}),(0,s.jsx)(t.A,{src:n(7953).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.p,{children:"The description of each pin is shown in the following table:"}),(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Function"}),(0,s.jsx)(r.th,{children:"Pin"}),(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{style:{textAlign:"center"},children:"Logical State"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsxs)(r.td,{children:["Ground (",(0,s.jsx)(r.strong,{children:"GND"}),")"]}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"VSS"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"-"}),(0,s.jsx)(r.td,{children:"0V"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Power Supply"}),(0,s.jsx)(r.td,{children:"2"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"VDD"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"-"}),(0,s.jsx)(r.td,{children:"+5V"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Contrast"}),(0,s.jsx)(r.td,{children:"3"}),(0,s.jsxs)(r.td,{children:[(0,s.jsx)(r.strong,{children:"VEE"})," or ",(0,s.jsx)(r.strong,{children:"V0"})]}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"-"}),(0,s.jsx)(r.td,{children:"0 - VDD"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Function Control"}),(0,s.jsx)(r.td,{children:"4"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"RS"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0/1"}),(0,s.jsxs)(r.td,{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:"RS=0"}),": D0 \u2013 D7 considered as commands"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:"RS=1"}),": D0 \u2013 D7 considered as data"]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Function Control"}),(0,s.jsx)(r.td,{children:"5"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"R/W"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0/1"}),(0,s.jsxs)(r.td,{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:"RS=0"}),": Write data (from microcontroller to LCD)"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:"RS=1"}),": Read data (from LCD to microcontroller)"]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Function Control"}),(0,s.jsx)(r.td,{children:"6"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"E"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"Transition from 0 to 1"}),(0,s.jsxs)(r.td,{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:"E=0"}),": LCD display access disabled"]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:"E=1"}),": Normal operation, data/commands being transmitted to the LCD"]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"7"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D0"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 0 LSB"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"8"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D1"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 1"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"9"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D2"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 2"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"10"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D3"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 3"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"11"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D4"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 4"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"12"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D5"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 5"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"13"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D6"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 6"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Data / Commands"}),(0,s.jsx)(r.td,{children:"14"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"D7"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"0 / 1"}),(0,s.jsx)(r.td,{children:"Bit 7 MSB"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Positive Power Supply for Backlight"}),(0,s.jsx)(r.td,{children:"15"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"K"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"-"}),(0,s.jsx)(r.td,{children:"0V"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Negative Power Supply for Backlight"}),(0,s.jsx)(r.td,{children:"16"}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.strong,{children:"A"})}),(0,s.jsx)(r.td,{style:{textAlign:"center"},children:"-"}),(0,s.jsx)(r.td,{children:"+5V"})]})]})]}),(0,s.jsx)(r.p,{children:"The following figure shows the typical connection between an LCD and a microcontroller:"}),(0,s.jsx)(t.A,{src:n(1426).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.p,{children:"As highlighted in the figure, it is possible to use all the LCD data lines or not, depending on the type of connection, which can be:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"4-line connection"}),": The least significant data bits (",(0,s.jsx)(r.strong,{children:"D0-D3"}),") are not connected."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"8-line connection"}),": All pins associated with the data bits are connected."]}),"\n"]}),(0,s.jsxs)(r.p,{children:["The LCD displays commonly used typically employ the ",(0,s.jsx)(r.strong,{children:"Hitachi HD44780"})," controller. The datasheet for the Hitachi HD44780 controller (",(0,s.jsx)(r.a,{href:"https://www.sparkfun.com/datasheets/LCD/HD44780.pdf",children:"link"}),") contains all the information about the structure, communication, and control of the LCD and is therefore an essential guide when designing a driver from scratch. Studying this information goes beyond the objectives of this guide (and it's quite complex), so it won't be covered in detail. However, it is useful to discuss some basic aspects of the Hitachi controller."]}),(0,s.jsx)(r.h3,{id:"memory-of-hitachi-hd44780-controller",children:"Memory of Hitachi HD44780 controller"}),(0,s.jsx)(r.p,{children:"The Hitachi HD44780 controller has three main memory locations:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"DDRAM (Data Display Random Access Memory)"}),": The DDRAM is used to store the characters to be displayed. It has a capacity to store 80 characters."]}),"\n"]}),(0,s.jsx)(t.A,{src:n(1140).A,alt:"",className:"custom-img"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"CGROM (Character Generation Read Only Memory)"}),": This memory contains a standard map of all the characters that can be displayed on the screen. Each character is assigned a memory location, and the addresses of each character correspond to the numbers of the ASCII characters (",(0,s.jsx)(r.a,{href:"https://www.asciitable.com/",children:"ASCII table"}),"):"]}),"\n"]}),(0,s.jsx)(t.A,{src:n(2491).A,alt:"",className:"custom-img"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"CGRAM (Character Generation Random Access Memory)"}),": In this 64-byte region, user-defined (custom) characters are stored. The user can define up to 8 characters of 5x8 pixels. For this, the 5 lowest bits of each 8-bit register are used to define the dark points (1) of each row that make up the character, which consists of a total of eight rows (registers)."]}),"\n"]}),(0,s.jsx)(t.A,{src:n(1341).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h3,{id:"basic-commands",children:"Basic commands"}),(0,s.jsxs)(r.p,{children:["All data transmitted to an LCD display via the D0-D7 pins will be interpreted as a command or data depending on the logical state of the ",(0,s.jsx)(r.strong,{children:"RS"})," pin:"]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"RS = 1"}),": The D0 - D7 bits are addresses of the characters to be displayed. In this case, the LCD controller addresses a selected character and displays it at the specified address in the DDRAM, which is defined before transmitting the character, or otherwise, it is based on the address of the previously transmitted character, which increments automatically."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"RS = 0"}),": The D0 - D7 bits are used as commands to set the display mode."]}),"\n"]}),(0,s.jsx)(r.p,{children:"The following table shows a command line for the LCD:"}),(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Comando"}),(0,s.jsx)("th",{children:"RS"}),(0,s.jsx)("th",{children:"RW"}),(0,s.jsx)("th",{children:"D7"}),(0,s.jsx)("th",{children:"D6"}),(0,s.jsx)("th",{children:"D5"}),(0,s.jsx)("th",{children:"D4"}),(0,s.jsx)("th",{children:"D3"}),(0,s.jsx)("th",{children:"D2"}),(0,s.jsx)("th",{children:"D1"}),(0,s.jsx)("th",{children:"D0"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Borrar el visualizador"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Poner el cursor al inicio"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"x"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Modo de entrada"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"I/D"}),(0,s.jsx)("td",{children:"S"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Activar/desactivar el visualizador"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"D"}),(0,s.jsx)("td",{children:"U"}),(0,s.jsx)("td",{children:"B"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Desplazar el cursor/visualizador"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"D/C"}),(0,s.jsx)("td",{children:"R/L"}),(0,s.jsx)("td",{children:"x"}),(0,s.jsx)("td",{children:"x"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Modo de funcionamiento"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"DL"}),(0,s.jsx)("td",{children:"N"}),(0,s.jsx)("td",{children:"F"}),(0,s.jsx)("td",{children:"x"}),(0,s.jsx)("td",{children:"x"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Establecer la direcci\xf3n CGRAM"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{colspan:"7",children:"Direcci\xf3n CGRAM"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Establecer la direcci\xf3n DDRAM"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{colspan:"8",children:"Direcci\xf3n DDRAM"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:'Leer la bandera "BUSY"(ocupado) (BF)'}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"BF"}),(0,s.jsx)("td",{colspan:"8",children:"Direcci\xf3n DDRAM"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Escribir en la CGRAM o en la DDRAM"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"0"}),(0,s.jsx)("td",{children:"D7"}),(0,s.jsx)("td",{children:"D6"}),(0,s.jsx)("td",{children:"D5"}),(0,s.jsx)("td",{children:"D4"}),(0,s.jsx)("td",{children:"D3"}),(0,s.jsx)("td",{children:"D2"}),(0,s.jsx)("td",{children:"D1"}),(0,s.jsx)("td",{children:"D0"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Leer la CGRAM o la DDRAM"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"1"}),(0,s.jsx)("td",{children:"D7"}),(0,s.jsx)("td",{children:"D6"}),(0,s.jsx)("td",{children:"D5"}),(0,s.jsx)("td",{children:"D4"}),(0,s.jsx)("td",{children:"D3"}),(0,s.jsx)("td",{children:"D2"}),(0,s.jsx)("td",{children:"D1"}),(0,s.jsx)("td",{children:"D0"})]})]})]}),(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Donde"}),":"]}),(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"I/D"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Incremento (por 1)"}),"\n",(0,s.jsx)(r.li,{children:"0 = Decremento (por 1)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"R/L"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Desplazamiento a la derecha"}),"\n",(0,s.jsx)(r.li,{children:"0 = Desplazamiento a la izquierda"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"S"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Desplazamiento del visualizador activado"}),"\n",(0,s.jsx)(r.li,{children:"0 = Desplazamiento del visualizador desactivado"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"DL"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Bus de datos de 8 bits"}),"\n",(0,s.jsx)(r.li,{children:"0 = Bus de datos de 4 bits"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"D"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Visualizador encendido"}),"\n",(0,s.jsx)(r.li,{children:"0 = Visualizador apagado"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"N"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Visualizar en dos lineas"}),"\n",(0,s.jsx)(r.li,{children:"0 = Visualizar en una linea"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"U"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Cursor activado"}),"\n",(0,s.jsx)(r.li,{children:"0 = Cursor desactivado"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"F"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Car\xe1cter de 5x8 puntos"}),"\n",(0,s.jsx)(r.li,{children:"0 = Car\xe1cter de 5x7 puntos"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"B"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Parpadeo del cursor encendido"}),"\n",(0,s.jsx)(r.li,{children:"0 = Parpadeo del cursor apagado"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"D/C"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"1 = Desplazamiento del visualizador"}),"\n",(0,s.jsx)(r.li,{children:"0 = Desplazamiento del cursor"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(r.h3,{id:"busy-flag-bf---busy-flag",children:"Busy Flag (BF - BUSY FLAG)"}),(0,s.jsxs)(r.p,{children:["This signal indicates that the display is ready to receive the next data after a command has been executed. This signal can be read from the D7 line, and when its value is 0V (",(0,s.jsx)(r.strong,{children:"BF=0"}),"), it indicates that the display is ready to receive a new command."]}),(0,s.jsx)(r.h2,{id:"handling-the-lcd-using-arduino",children:"Handling the LCD using Arduino"}),(0,s.jsx)(r.p,{children:"Fortunately, it is not necessary to implement all the above logic, as this would involve designing the driver."}),(0,s.jsxs)(r.p,{children:["The functions for controlling the character LCD are found in the ",(0,s.jsx)(r.strong,{children:"LiquidCrystal"})," library for Arduino (",(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/",children:"link"}),"). Fortunately, these also work for the ESP32."]}),(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Function"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/liquidcrystal/",children:(0,s.jsx)(r.code,{children:"LiquidCrystal()"})})}),(0,s.jsxs)(r.td,{children:["Creates a ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})," object to control the display. The display can be controlled using a 4-line connection (leaving ",(0,s.jsx)(r.strong,{children:"D0-D3"})," unconnected) or an 8-line connection. Additionally, the ",(0,s.jsx)(r.strong,{children:"RW"})," pin can be omitted as a parameter of the function",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"LiquidCrystal(rs, enable, d4, d5, d6, d7)"})," ",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"LiquidCrystal(rs, rw, enable, d4, d5, d6, d7)"}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"LiquidCrystal(rs, enable, d0, d1, d2, d3, d4, d5, d6, d7)"}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"LiquidCrystal(rs, rw, enable, d0, d1, d2, d3, d4, d5, d6, d7)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"rs"})}),": Arduino pin number connected to the LCD ",(0,s.jsx)(r.strong,{children:"RS"})," pin "]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"rw"})}),": Arduino pin number connected to the LCD ",(0,s.jsx)(r.strong,{children:"RW"})," pin "]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"enable"})}),": Arduino pin number connected to the LCD ",(0,s.jsx)(r.strong,{children:"E"})," pin "]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"d0, d1, d2, d3, d4, d5, d6, d7"})}),": Arduino pin numbers connected to the corresponding data bus pins of the LCD. The ",(0,s.jsx)(r.code,{children:"d0, d1, d2, d3"})," parameters are optional and omitted when the LCD is connected to the Arduino using four lines."]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/begin/",children:(0,s.jsx)(r.code,{children:"begin()"})})}),(0,s.jsxs)(r.td,{children:["Specifies the type of display to be used by indicating its dimensions (rows and columns).",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.begin(cols, rows)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable tipo ",(0,s.jsx)(r.code,{children:"LiquidCrystal"}),"."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"cols"})}),": Number of columns in the display."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"rows"})}),": Number of rows in the display."]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/clear/",children:(0,s.jsx)(r.code,{children:"clear()"})})}),(0,s.jsxs)(r.td,{children:["Clears the LCD screen and positions the cursor in the upper-left corner.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.clear()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/home/",children:(0,s.jsx)(r.code,{children:"home()"})})}),(0,s.jsxs)(r.td,{children:["Positions the cursor in the upper-left corner of the LCD screen.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.home()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/setcursor/",children:(0,s.jsx)(r.code,{children:"setCursor()"})})}),(0,s.jsxs)(r.td,{children:["Specifies the position where the cursor will be placed",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.setCursor(col, row)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"}),"."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"col"})}),": Column where the cursor will be placed (0 being the first column)."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"row"})}),": Row where the cursor will be placed (0 being the first row)."]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/write/",children:(0,s.jsx)(r.code,{children:"write()"})})}),(0,s.jsxs)(r.td,{children:["Writes a character to the LCD",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.write(data)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable tipo ",(0,s.jsx)(r.code,{children:"LiquidCrystal"}),"."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"data"})}),": Character to be written on the display."]}),(0,s.jsx)(r.strong,{children:"Return"}),": Number of bytes written"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/print/",children:(0,s.jsx)(r.code,{children:"print()"})})}),(0,s.jsxs)(r.td,{children:["Prints text to the LCD",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.print(data)"}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.print(data,BASE)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"}),"."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"data"})}),": Data to be printed (",(0,s.jsx)(r.code,{children:"char"}),", ",(0,s.jsx)(r.code,{children:"byte"}),", ",(0,s.jsx)(r.code,{children:"int"}),", ",(0,s.jsx)(r.code,{children:"long"}),", or ",(0,s.jsx)(r.code,{children:"string"}),")."]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"BASE"})}),": Optional parameter to define the ",(0,s.jsx)(r.strong,{children:"BASE"})," in which numbers are displayed (",(0,s.jsx)(r.code,{children:"BIN"}),", ",(0,s.jsx)(r.code,{children:"DEC"}),", ",(0,s.jsx)(r.code,{children:"OCT"}),", ",(0,s.jsx)(r.code,{children:"HEX"}),", or ",(0,s.jsx)(r.code,{children:"string"}),")."]}),(0,s.jsx)(r.strong,{children:"Return"}),": Number of bytes written"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/print/",children:(0,s.jsx)(r.code,{children:"cursor()"})})}),(0,s.jsxs)(r.td,{children:["Displays the cursor on the LCD",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.cursor()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/nocursor/",children:(0,s.jsx)(r.code,{children:"noCursor()"})})}),(0,s.jsxs)(r.td,{children:["Hides the cursor",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.noCursor()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/blink/",children:(0,s.jsx)(r.code,{children:"blink()"})})}),(0,s.jsxs)(r.td,{children:["Display a blinking cursor on the LCD",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.blink()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/noblink/",children:(0,s.jsx)(r.code,{children:"noBlink()"})})}),(0,s.jsxs)(r.td,{children:["Turns off the blinking cursor",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.noBlink()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/display/",children:(0,s.jsx)(r.code,{children:"display()"})})}),(0,s.jsxs)(r.td,{children:["Turns on the LCD screen after turning it off with ",(0,s.jsx)(r.code,{children:"noDisplay()"}),".",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.display()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/nodisplay/",children:(0,s.jsx)(r.code,{children:"noDisplay()"})})}),(0,s.jsxs)(r.td,{children:["Turns off the LCD screen. The text on the screen is not lost.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.noDisplay()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/scrolldisplayleft/",children:(0,s.jsx)(r.code,{children:"scrollDisplayLeft()"})})}),(0,s.jsxs)(r.td,{children:["Scrolls the display content (text and cursor) one space to the left.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.scrollDisplayLeft()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/scrolldisplayright/",children:(0,s.jsx)(r.code,{children:"scrollDisplayRight()"})})}),(0,s.jsxs)(r.td,{children:["Scrolls the display content (text and cursor) one space to the right.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.scrollDisplayRight()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/autoscroll/",children:(0,s.jsx)(r.code,{children:"autoScroll()"})})}),(0,s.jsxs)(r.td,{children:["Enables automatic scrolling of the display content.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.autoScroll()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/noautoscroll/",children:(0,s.jsx)(r.code,{children:"noAutoScroll()"})})}),(0,s.jsxs)(r.td,{children:["Disables automatic scrolling of the display content.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.noAutoScroll()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/lefttoright/",children:(0,s.jsx)(r.code,{children:"leftToRight()"})})}),(0,s.jsxs)(r.td,{children:["Sets the text writing direction on the display to left-to-right (default).",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.leftToRight()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/righttoleft/",children:(0,s.jsx)(r.code,{children:"rightToLeft()"})})}),(0,s.jsxs)(r.td,{children:["Sets the text writing direction on the display to right-to-left.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.rightToLeft()"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable tipo ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/liquidcrystal/createchar/",children:(0,s.jsx)(r.code,{children:"createChar()"})})}),(0,s.jsxs)(r.td,{children:["Creates a custom character (glyph) to be used on the LCD. Up to eight 5x8 pixel characters are supported (numbered 0 to 7). The appearance of each character is defined in an array of 8 bytes, one for each row. The five least significant bits of each byte determine the pixels in that row. To display a custom character on the screen, use the ",(0,s.jsx)(r.code,{children:"write"})," function with the number of the custom character (0-7) that you want to display.",(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Syntax"}),":",(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"lcd.createChar(num, data)"}),(0,s.jsx)("br",{}),(0,s.jsx)("br",{}),(0,s.jsx)(r.strong,{children:"Parameters"}),": ",(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"lcd"})}),": Variable type ",(0,s.jsx)(r.code,{children:"LiquidCrystal"})]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"num"})}),": Number of the character to create (0-7) "]}),(0,s.jsxs)("li",{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"data"})}),": Pixel matrix of the data to be created "]})]})]})]})]}),(0,s.jsx)(r.p,{children:"As support tools to facilitate the generation of custom characters, the following are recommended:"}),(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["Custom Character Generator for HD44780 LCD Modules (",(0,s.jsx)(r.a,{href:"http://omerk.github.io/lcdchargen/",children:"link"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:["HD44780 LCD User-Defined Graphics (",(0,s.jsx)(r.a,{href:"https://www.quinapalus.com/hd44780udg.html",children:"link"}),")"]}),"\n"]}),(0,s.jsx)(r.h1,{id:"activity-3---temperature-and-humidity-measurement-using-the-esp32-with-display-on-an-lcd",children:"Activity 3 - Temperature and Humidity Measurement Using the ESP32 with Display on an LCD"}),(0,s.jsx)(r.h2,{id:"summary-2",children:"Summary"}),(0,s.jsx)(r.p,{children:"Create an application that displays the temperature and humidity obtained from a DHT11 sensor on an LCD display. It is recommended to use the serial port for debugging the application."}),(0,s.jsx)(r.h2,{id:"hardware-2",children:"Hardware"}),(0,s.jsx)(r.h3,{id:"components-2",children:"Components"}),(0,s.jsx)(r.p,{children:"The following table shows the main components of the circuit to be assembled.:"}),(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Components"}),(0,s.jsx)(r.th,{children:"Quantity"}),(0,s.jsx)(r.th,{children:"Observations"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"ESP32"}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsx)(r.td,{})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"DHT11 Temperature and Humidity Module"}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsxs)(r.td,{children:["Available in Elegoo kit (",(0,s.jsx)(r.a,{href:"https://cdn.sparkfun.com/assets/b/3/f/9/d/OKY3068-1.pdf",children:"datasheet"}),")"]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"LCD 1602 Module"}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsxs)(r.td,{children:["Available in Elegoo kit (",(0,s.jsx)(r.a,{href:"https://www.waveshare.com/datasheet/LCD_en_PDF/LCD1602.pdf",children:"datasheet"}),")"]})]})]})]}),(0,s.jsx)(r.h3,{id:"schematics-2",children:"Schematics"}),(0,s.jsx)(t.A,{src:n(475).A,alt:"",className:"custom-img"}),(0,s.jsx)(r.h3,{id:"connection-diagram-2",children:"Connection diagram"}),(0,s.jsx)(r.p,{children:"The connection between the sensor, the ESP32, and the external hardware modules is shown below:"}),(0,s.jsx)(t.A,{src:n(7417).A,alt:"",className:"custom-img"}),(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Fritzing file"})}),"\n",(0,s.jsxs)(r.p,{children:["The example Fritzing file ",(0,s.jsx)(r.strong,{children:"dh11_lcd-esp32.fzz"})," can be downloaded from ",(0,s.jsx)(r.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:n(5392).A+"",children:"[link]"})]}),"\n"]}),(0,s.jsx)(r.h2,{id:"software-2",children:"Software"}),(0,s.jsx)(r.h4,{id:"program-1",children:"Program"}),(0,s.jsx)(r.p,{children:"The coded program is shown to follow:"}),(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'// Example testing sketch for various DHT humidity/temperature sensors\r\n// Written by ladyada, public domain\r\n\r\n// REQUIRES the following Arduino libraries:\r\n// - DHT Sensor Library: https://github.com/adafruit/DHT-sensor-library\r\n// - Adafruit Unified Sensor Lib: https://github.com/adafruit/Adafruit_Sensor\r\n\r\n\r\n#include <LiquidCrystal.h>\r\n#include "DHT.h"\r\n\r\n#define DHTPIN 19     // Digital pin connected to the DHT sensor\r\n\r\n// Uncomment whatever type you\'re using!\r\n#define DHTTYPE DHT11   // DHT 11\r\n//#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321\r\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)\r\n\r\n// Connect pin 1 (on the left) of the sensor to +5V\r\n// NOTE: If using a board with 3.3V logic like an Arduino Due connect pin 1\r\n// to 3.3V instead of 5V!\r\n// Connect pin 8 of the sensor to whatever your DHTPIN is\r\n// Connect pin 3 (on the right) of the sensor to GROUND (if your sensor has 3 pins)\r\n// Connect pin 4 (on the right) of the sensor to GROUND and leave the pin 3 EMPTY (if your sensor has 4 pins)\r\n// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor\r\n\r\n// Initialize DHT sensor.\r\n// Note that older versions of this library took an optional third parameter to\r\n// tweak the timings for faster processors.  This parameter is no longer needed\r\n// as the current DHT reading algorithm adjusts itself to work on faster procs.\r\nDHT dht(DHTPIN, DHTTYPE);\r\n\r\n// initialize the library by associating any needed LCD interface pin\r\n// with the arduino pin number it is connected to\r\nconst int rs = 22, en = 23, d4 = 4, d5 = 0, d6 = 2, d7 = 15;\r\nLiquidCrystal lcd(rs, en, d4, d5, d6, d7);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  Serial.println(F("DHTxx test!"));\r\n  dht.begin();\r\n\r\n  // set up the LCD\'s number of columns and rows:\r\n  lcd.begin(16, 2);\r\n  // Print a message to the LCD.\r\n  lcd.print("LCD Ready!");\r\n}\r\n\r\nvoid loop() {\r\n  // Wait a few seconds between measurements.\r\n  delay(1000);\r\n\r\n  // Reading temperature or humidity takes about 250 milliseconds!\r\n  // Sensor readings may also be up to 1 seconds \'old\' (its a very slow sensor)\r\n  float h = dht.readHumidity();\r\n  // Read temperature as Celsius (the default)\r\n  float t = dht.readTemperature(); \r\n  // Check if any reads failed and exit early (to try again).\r\n  \r\n  // Print readings using the serial port\r\n  if (isnan(h) || isnan(t)) {\r\n    Serial.println(F("Failed to read from DHT sensor!"));\r\n    return;\r\n  }\r\n  Serial.print(F("Humidity: "));\r\n  Serial.print(h);\r\n  Serial.print(F("%  Temperature: "));\r\n  Serial.print(t);\r\n  Serial.println(F("\xb0C "));\r\n\r\n  // Print readings using the lcd\r\n  lcd.clear();  \r\n  //Choosing the first line and row\r\n  lcd.setCursor(0,0);\r\n  //Typing Humedad:   to the first line starting from the first row\r\n  lcd.print("Humedad: ");\r\n  //Typing the humidity readings after "Humedad: "\r\n  lcd.print(h);\r\n  lcd.print("%");\r\n  lcd.setCursor(0,1);\r\n  //Typing Temperatura:   to the first line starting from the first row\r\n  lcd.print("Temp: ");\r\n  //Typing   the temperature readings after "Temperatura: " \r\n  lcd.print(t);\r\n  lcd.print((char)223); // displaying degree symbol (\xb0).\r\n  lcd.print("C");\r\n}\n'})}),(0,s.jsx)(r.h2,{id:"references",children:"References"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://randomnerdtutorials.com/esp32-dht11-dht22-temperature-humidity-sensor-arduino-ide/",children:"https://randomnerdtutorials.com/esp32-dht11-dht22-temperature-humidity-sensor-arduino-ide/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://randomnerdtutorials.com/esp32-dht11-dht22-temperature-humidity-web-server-arduino-ide/",children:"https://randomnerdtutorials.com/esp32-dht11-dht22-temperature-humidity-web-server-arduino-ide/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://learn.sparkfun.com/tutorials/rht03-dht22-humidity-and-temperature-sensor-hookup-guide/all",children:"https://learn.sparkfun.com/tutorials/rht03-dht22-humidity-and-temperature-sensor-hookup-guide/all"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://learn.adafruit.com/dht/overview",children:"https://learn.adafruit.com/dht/overview"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://programarfacil.com/blog/arduino-blog/sensor-dht11-temperatura-humedad-arduino/",children:"https://programarfacil.com/blog/arduino-blog/sensor-dht11-temperatura-humedad-arduino/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.arduino.cc/reference/en/libraries/dht-sensor-library/",children:"https://www.arduino.cc/reference/en/libraries/dht-sensor-library/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://wiki.seeedstudio.com/Grove-TemperatureAndHumidity_Sensor/",children:"https://wiki.seeedstudio.com/Grove-TemperatureAndHumidity_Sensor/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-DHT11.html",children:"https://www.seeedstudio.com/Grove-Temperature-Humidity-Sensor-DHT11.html"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.seeedstudio.com/blog/2020/04/07/how-to-pick-the-best-temperature-and-humidity-sensor-for-your-arduino-project/",children:"https://www.seeedstudio.com/blog/2020/04/07/how-to-pick-the-best-temperature-and-humidity-sensor-for-your-arduino-project/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.seeedstudio.com/blog/2019/08/22/8-types-of-temperature-sensors-you-should-know/",children:"https://www.seeedstudio.com/blog/2019/08/22/8-types-of-temperature-sensors-you-should-know/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.seeedstudio.com/blog/2022/11/11/selection-guide-of-grove-temperature-and-humidity-sensor-that-support-esphome/",children:"https://www.seeedstudio.com/blog/2022/11/11/selection-guide-of-grove-temperature-and-humidity-sensor-that-support-esphome/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://playground.arduino.cc/Main/KeypadTutorial/",children:"https://playground.arduino.cc/Main/KeypadTutorial/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://learn.adafruit.com/matrix-keypad",children:"https://learn.adafruit.com/matrix-keypad"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://randomnerdtutorials.com/arduino-membrane-keypad-tutorial/",children:"https://randomnerdtutorials.com/arduino-membrane-keypad-tutorial/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.luisllamas.es/arduino-teclado-matricial/",children:"https://www.luisllamas.es/arduino-teclado-matricial/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://www.circuitbasics.com/how-to-set-up-a-keypad-on-an-arduino/",children:"https://www.circuitbasics.com/how-to-set-up-a-keypad-on-an-arduino/"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://docs.arduino.cc/learn/electronics/lcd-displays/",children:"https://docs.arduino.cc/learn/electronics/lcd-displays/"})}),"\n"]})]})]})}function x(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9365:(e,r,n)=>{n.d(r,{A:()=>d});n(6540);var s=n(4164);const i={tabItem:"tabItem_Ymn6"};var t=n(4848);function d(e){let{children:r,hidden:n,className:d}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,d),hidden:n,children:r})}},1470:(e,r,n)=>{n.d(r,{A:()=>D});var s=n(6540),i=n(4164),t=n(3104),d=n(6347),l=n(205),c=n(7485),a=n(1682),o=n(679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function x(e){const{values:r,children:n}=e;return(0,s.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:n,attributes:s,default:i}}=e;return{value:r,label:n,attributes:s,default:i}}))}(n);return function(e){const r=(0,a.X)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function j(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function u(e){let{queryString:r=!1,groupId:n}=e;const i=(0,d.W6)(),t=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,c.aZ)(t),(0,s.useCallback)((e=>{if(!t)return;const r=new URLSearchParams(i.location.search);r.set(t,e),i.replace({...i.location,search:r.toString()})}),[t,i])]}function p(e){const{defaultValue:r,queryString:n=!1,groupId:i}=e,t=x(e),[d,c]=(0,s.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!j({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:r,tabValues:t}))),[a,h]=u({queryString:n,groupId:i}),[p,m]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[i,t]=(0,o.Dv)(n);return[i,(0,s.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:i}),f=(()=>{const e=a??p;return j({value:e,tabValues:t})?e:null})();(0,l.A)((()=>{f&&c(f)}),[f]);return{selectedValue:d,selectValue:(0,s.useCallback)((e=>{if(!j({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),m(e)}),[h,m,t]),tabValues:t}}var m=n(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(4848);function b(e){let{className:r,block:n,selectedValue:s,selectValue:d,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:a}=(0,t.a_)(),o=e=>{const r=e.currentTarget,n=c.indexOf(r),i=l[n].value;i!==s&&(a(r),d(i))},h=e=>{let r=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;r=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;r=c[n]??c[c.length-1];break}}r?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},r),children:l.map((e=>{let{value:r,label:n,attributes:t}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:s===r?0:-1,"aria-selected":s===r,ref:e=>c.push(e),onKeyDown:h,onClick:o,...t,className:(0,i.A)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":s===r}),children:n??r},r)}))})}function y(e){let{lazy:r,children:n,selectedValue:i}=e;const t=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=t.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:t.map(((e,r)=>(0,s.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function w(e){const r=p(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,g.jsx)(b,{...r,...e}),(0,g.jsx)(y,{...r,...e})]})}function D(e){const r=(0,m.A)();return(0,g.jsx)(w,{...e,children:h(e.children)},String(r))}},168:(e,r,n)=>{n.d(r,{A:()=>i});n(6540);var s=n(4848);const i=function(e){let{src:r,alt:n,caption:i,className:t}=e;return(0,s.jsxs)("div",{className:"custom-img-container",children:[(0,s.jsx)("img",{src:r,alt:n,className:`custom-img ${t}`}),i&&(0,s.jsx)("div",{className:"custom-caption",dangerouslySetInnerHTML:{__html:i}})]})}},148:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/files/dh11-esp32-30d047455aee1b22ae4b79eaf1ed18df.fzz"},5392:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/files/dh11_lcd-esp32-c0e66760f7ad051250f8329c6fdc728a.fzz"},1532:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/files/dth11_esp32-f13fb1987e0b16efec5ced32eaab56cd.ino"},1080:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/files/esp32_keypad-a051af55066a269e5178e8d6047da7e8.fzz"},2284:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/files/main-29f8d6cee2cd847de0bf436846fd2af7.cpp"},8331:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/files/platformio-765d29e1a9cb2d5b35e26036c86f5a0a.ini"},5746:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/DHT11\u2013Temperature-Sensor-Pinout-35d5fd7f31d1cd12af079804f2c9cbed.jpg"},7953:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/LCD_16x2-98241cb1913a0612ca6ffe7559aa0362.png"},1341:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/cgram-9c13ae33191bd6aa2596dfee92891fac.gif"},2491:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/cgrom-24b7d865061e0ea1c6a62f355d0e9309.gif"},1426:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/conexion_LCD-5aacbef43fe5ecf33d32087f371238eb.gif"},1140:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/ddram-196f753fe6eb3347dd561dfdd81596e4.png"},357:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/dh11-esp32_bb-15c560610b5955aaa8720ce922b093ce.jpg"},9791:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/dh11-esp32_sch-e8822187c1c66216e01e48948d78241c.png"},7417:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/dh11_lcd-esp32_bb-2dffa4b165b71371a929e50607f2a796.png"},475:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/dh11_lcd-esp32_sch-14e73a8d92a9bd8aa8f8c36653b42c06.png"},8067:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/esp32_dht11-serial-b4b4c81c5ebb336e4ddcc4ea79cb4925.png"},1161:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/esp32_keypad_bb-8cb1f9f2ef7b06564eada67aada96e8a.png"},8859:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/esp32_keypad_sch-57b674bc29a662b8ba684a3e0e04598b.png"},4833:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/example_keypad2-1db9c9f2572834af10f454e0653657ef.png"},4888:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/example_keypad3-0298111ae4bbdb1bbb30a1b858d3f3a8.png"},6407:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/example_keypad4-e24fb2a015088c9ed4ae25f7a8ea88f2.png"},8718:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/example_keypad5-49b592ea515a4e744fd490a4a464d986.png"},4469:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/example_keypad6-b5a0886a4adc67bc077305c4f76e2958.png"},7819:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/example_keypad8-d5a816cbb4ef2a335ad33683addded8f.png"},2466:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/example_keypad9-348f395a1584b309d13bcd7cdf4eb105.png"},5266:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/libreria_instalacion-51bf15d693cdbd8431748fd758a3e958.png"},6113:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/libreria_unified_instalacion-7433ad1a11bbcc67d2b1b4c92179e61f.png"},7623:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/pines_elegoo-51bd3a0e71a751fe4a750e70a62cf008.png"},8453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>l});var s=n(6540);const i={},t=s.createContext(i);function d(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);